# vim:tw=0:ts=2:sw=2:et:norl
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/doblabs/easy-as-pypi#ðŸ¥§
# License: MIT
# yamllint disable rule:line-length

---

name: 'Install Python and load venv from cache'

description: 'Install Python and load venv from cache'

runs:
  using: "composite"
  steps:
    - name: Prepare Poetry assets â€” pyproject.toml and poetry.lock
      if: ${{ steps.check-disablement.outputs.inhibit_test == 'false' }}
      uses: ./.github/actions/setup-poetry-assets
      with:
        prerelease: ${{ inputs.prerelease }}

    # CXREF: https://github.com/actions/setup-python
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      if: ${{ steps.check-disablement.outputs.inhibit_test == 'false' }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        # FIXME/2023-05-21: See comments elsewhere: Consider replacing
        # or complementing USYNC_PIP_CACHE mechanism with setup-python
        # cache.
        # - CXREF: https://github.com/actions/setup-python#caching-packages-dependencies
        #
        #  cache: 'poetry' # cache virtualenv dir

    # Cache the pip wheels (avoid re-downloading from PyPI), and give
    # install-poetry a boost. Shaves ~10s off step time, from 15s to 5s.
    # - Enable `virtualenvs-in-project` so local .venv/ is used and cached.
    # - With or without caches, Windows takes a longer time.
    #   - 2022-10-04: This test job took 4m. The install-poetry took 2m.
    #     With the cache ready on the next run, install-poetry took 54s.
    #     And with both caches used, the 4m job run was reduced to 1m 38s.
    #     Still a lot longer than Ubuntu, but also a decent improvement.
    #   - 2023-05-21: easy-as-pypi test job v3.8 took 44s (cached).
    # - Note the cache key: It invalidates cache whenever this Yaml changed.
    # CXREF:
    #   https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
    #   https://github.com/snok/install-poetry/
    #   https://github.com/actions/cache
    # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
    - name: Set pip wheels path (Ubuntu/macOS)
      if: ${{ (runner.os == 'Linux') || (runner.os == 'macOS')
        && steps.check-disablement.outputs.inhibit_test == 'false' }}
      shell: bash
      run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
    - name: Set pip wheels path (Windows)
      if: ${{ runner.os == 'Windows'
        && steps.check-disablement.outputs.inhibit_test == 'false' }}
      shell: bash
      run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
    - name: Load cached $HOME/.local
      if: ${{ steps.check-disablement.outputs.inhibit_test == 'false' }}
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE }}
        key: dotlocal-${{ runner.os
          }}-${{ steps.setup-python.outputs.python-version
          }}-${{ hashFiles('.github/workflows/checks.yml')
          }}
    - name: Install Poetry
      if: ${{ steps.check-disablement.outputs.inhibit_test == 'false' }}
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install poetry-dynamic-versioning
      if: ${{ steps.check-disablement.outputs.inhibit_test == 'false' }}
      run: poetry self add "poetry-dynamic-versioning[plugin]"

    # 2022-10-04: Cache the virtualenv, avoid re-installing packages.
    # Saves ~35s from step time, from 35s to 0s (b/c skips step, because `if:`).
    # - The install-poetry doc says that, for ubuntu-latest and macos-latest,
    #   the path is:
    #     path: .venv
    #   But the the windows-latest example uses a different path.
    #     path: {cache-dir}/virtualenvs
    #   (Though the cached-pip-wheels example shows `path: ~/.cache`.)
    #   And they suggest caching pip wheels, not the venv (which saves
    #   downloading from PyPI, but not from installing).
    #   - REFER: https://github.com/snok/install-poetry/#running-on-windows
    # - The Peterbe article adds the Yaml hash to the key, which seems legit.
    #   The causes a cache miss if you edit this file, causing a fresh install...
    #   though maybe we don't need to be that aggressive?
    #   - REFER: https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
    # - BWARE: install-poetry warns that Windows sometimes hangs on this step.
    #     https://github.com/snok/install-poetry/#caching-on-windows-runners
    #   So they recommend caching pip wheels instead of .venv.
    # USYNC_LOAD_VENV: Multiple jobs in this Yaml share the following steps.
    # - 2023-12-22: This used to cache all poetry.lock files:
    #                 }}-${{ hashFiles('**/poetry.lock')
    #               But we might move a prerelease lock file in place, so:
    #                 }}-${{ hashFiles('poetry.lock')
    #               Also checks only use the one lock file (and I think
    #               I saw the '**/poetry.lock' in an example, but don't
    #               remember if it was useful in some other way; doubt it.)
    - name: Load cached venv
      id: cached-poetry-dependencies
      if: ${{ steps.check-disablement.outputs.inhibit_test == 'false' }}
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os
          }}-${{ steps.setup-python.outputs.python-version
          }}-${{ github.job
          }}-${{ hashFiles('.github/workflows/checks.yml')
          }}-${{ hashFiles('Makefile')
          }}-${{ hashFiles('Maketasks.sh')
          }}-${{ hashFiles('poetry.lock')
          }}
