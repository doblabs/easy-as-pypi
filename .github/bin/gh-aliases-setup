#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=sh
# Project: https://github.com/doblabs/easy-as-pypi#ðŸ¥§
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# gh-alias updates ~/.config/gh/config.yml

eapp_gh_aliases_setup () {
  # REFER: gh help alias set

  # Easily start all sorts of EAPP workflows.
  gh alias delete cascade 2> /dev/null || true
  gh alias set --shell cascade '${DOPP_KIT:-${HOME}/.kit}/py/easy-as-pypi/bin/git-cascade "$@"'

  # DUNNO/2023-12-10: What's a good alias name? Going w/ 'list' for now.
  gh alias delete list 2> /dev/null || true
  gh alias set --shell list "$(declare -f _gh_run_list_eapp); _gh_run_list_eapp"
}

# ***

# The gh-run assumes set-default setup (or .git/config updated), e.g.,
#   gh repo set-default "doblabs/$(basename "$(git rev-parse --show-toplevel)")"
# Otherwise you'd wanna call it with GH_REPO specified:
#   GH_REPO="doblabs/$(basename "$(git rev-parse --show-toplevel)")" gh run list...

_gh_run_list_eapp () {
  local input_line

  gh run list -L 13 | sed '/^ /d' | sed '/^-/d' | sed '/^$/d' \
    | while IFS= read -r input_line; do

    # NOTE: The run-name is displayed last, b/c "%<n>s" padding doesn't work
    #       well with wide chars (and then any text that would come after
    #       wouldn't align, at least not without properly counting wide
    #       chars and manually padding).
    printf "%-11s %-9s %-4s %-6s %-11s %-40s %-60s\n" \
      "$(echo "${input_line}" | cut -f 1 | head -c 11)" \
      "$(echo "${input_line}" | cut -f 2 | head -c 9)" \
      "$(echo "${input_line}" | cut -f 9 | head -c 4)" \
      "$(echo "${input_line}" | cut -f 8 | head -c 6)" \
      "$(echo "${input_line}" | cut -f 7 | head -c 11)" \
      "$(echo "${input_line}" | cut -f 5 | head -c 40)" \
      "$(echo "${input_line}" | cut -f 3 | head -c 60)" \
      ;
  done
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_NORMAL_EXIT=false

exit_1 () { _NORMAL_EXIT=true; exit 1; }

exit_0 () { _NORMAL_EXIT=true; exit 0; }

exit_cleanup () {
  if ! ${_NORMAL_EXIT}; then
    >&2 echo "GAFFE: ${PROG_NAME} exited abnormally!"
    >&2 echo "- Hint: Enable \`set -x\` and run again..."
  fi
}

# ***

main () {
  set -e

  trap exit_cleanup EXIT

  eapp_gh_aliases_setup "$@"

  # Unhook exit_cleanup.
  trap - EXIT
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  # Being executed, so execute.
  main "$@"
fi

unset -f main

