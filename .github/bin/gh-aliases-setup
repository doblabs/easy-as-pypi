#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=sh
# Project: https://github.com/doblabs/easy-as-pypi#ðŸ¥§
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# gh-alias updates ~/.config/gh/config.yml

eapp_gh_aliases_setup () {
  # REFER: gh help alias set

  # Easily start all sorts of EAPP workflows.
  gh alias delete cascade 2> /dev/null || true
  gh alias set --shell cascade '${DOPP_KIT:-${HOME}/.kit}/py/easy-as-pypi/bin/git-cascade "$@"'

  # A ~~reformatted~~ **beautified** `gh run list`.
  # DUNNO/2023-12-10: What's a good alias name? Going w/ 'list' for now.
  gh alias delete list 2> /dev/null || true
  gh alias set --shell list "$(declare -f _gh_run_list_eapp); _gh_run_list_eapp"

  # DUNNO/2023-12-20: Call it 'fail'? 'open-fail'? 'open-last-failure'??
  gh alias delete open-last-failure 2> /dev/null || true
  gh alias set --shell open-last-failure \
    "$(declare -f _gh_open_last_failure_eapp); _gh_open_last_failure_eapp"
}

# ***

# The gh-run assumes set-default setup (or .git/config updated), e.g.,
#   gh repo set-default "doblabs/$(basename "$(git rev-parse --show-toplevel)")"
# Otherwise you'd wanna call it with GH_REPO specified:
#   GH_REPO="doblabs/$(basename "$(git rev-parse --show-toplevel)")" gh run list...

_gh_run_list_eapp () {
  local input_line

  gh run list -L 13 | sed '/^ /d' | sed '/^-/d' | sed '/^$/d' \
    | while IFS= read -r input_line; do

    # NOTE: The run-name is displayed last, b/c "%<n>s" padding doesn't work
    #       well with wide chars (and then any text that would come after
    #       wouldn't align, at least not without properly counting wide
    #       chars and manually padding).
    printf "%-11s %-9s %-4s %-6s %-11s %-40s %-60s\n" \
      "$(echo "${input_line}" | cut -f 1 | head -c 11)" \
      "$(echo "${input_line}" | cut -f 2 | head -c 9)" \
      "$(echo "${input_line}" | cut -f 9 | head -c 4)" \
      "$(echo "${input_line}" | cut -f 8 | head -c 6)" \
      "$(echo "${input_line}" | cut -f 7 | head -c 11)" \
      "$(echo "${input_line}" | cut -f 5 | head -c 40)" \
      "$(echo "${input_line}" | cut -f 3 | head -c 60)" \
      ;
  done
}

# ***

# 2023-12-20: Make it easier to most recently failed job.
#
# - Use case: Automate what had been these manual steps:
#
#     # Print list of recent runs:
#     gh run list | cat
#     # OR, using our gh alias:
#     gh list
#
#     # Look for "failure" in list and double-click-copy
#     # the run-id, then open it's webpage, e.g.,:
#     gh run view -w ${run_id} | cat
#
# - Some annoyances with `gh` (which I otherwise love!):
#
#   - Note the use of `| cat`, otherwise `gh` shows
#     *paged* output that you must dismiss (e.g.,
#     by pressing `q`).
#
#   - The 'view' command opens the page in an existing
#     browser window.
#
#     - This is annoying for a few reasons, firstly
#       that it pops up a window you already had open,
#       whether it had one tab, or one hundred, and
#       pollutes the window with a new tab.
#
#     - When you Ctrl-w close the window, if it had
#       opened alongside other tabs, the window that
#       was raised by the 'view' command is still
#       there.
#
#       Whereas when you open to a *new* window, a
#       single Close with *always* dismiss the new
#       window! (Guh, how is this not the default,
#       open a new window?)
#
#   - Fortunately this isn't my first rodeo, so I
#     just mimicked what git-smart's `git open`
#     does, and who doesn't love `jq` for some
#     data wrangling, makes life so much easier.

_gh_open_last_failure_eapp () {
  local run_id
  local run_url

  # Select first "failure" and print the run-id.
  run_id="$(
    gh run list -L 13 --json "conclusion,databaseId" \
      | jq -r '[.[] | select(.conclusion=="failure")][0] | .databaseId'
  )"

  if [ -z "${run_id}" ]; then
    echo "All good!"

    return 0
  fi

  # "Trick" 'view' into just printing the URL; we'll take it from there.
  # - gh-run-view sends a string to pager output which user won't see, e.g.,
  #     Opening github.com/doblabs/easy-as-pypi/actions/runs/7274859732 in your browser.
  run_url="$(GH_BROWSER=echo gh run view -w ${run_id})"

  if type -t sensible-open > /dev/null; then
    # https://github.com/landonb/sh-sensible-open
    sensible-open "${run_url}"
  elif [ "$(uname)" = "Darwin" ]; then
    open "${run_url}" > /dev/null &
  else
    # - Backgrounding (&) necessary in case opens new browser session [I think].
    # - Ignore stderr because something (this file is from chromium) sometimes spews:
    #     [8257:8257:0100/000000.437736:ERROR:zygote_linux.cc(662)] write: Broken pipe (32)
    # - Use sub-process so shell doesn't print "Done" message, e.g.,
    #     [2]-  Done                    <command-and-args>
    (
      sensible-browser \
        --new-window \
        "${run_url}" \
        --profile-directory=Default \
          > /dev/null 2>&1 &
    )
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

_NORMAL_EXIT=false

exit_1 () { _NORMAL_EXIT=true; exit 1; }

exit_0 () { _NORMAL_EXIT=true; exit 0; }

exit_cleanup () {
  if ! ${_NORMAL_EXIT}; then
    >&2 echo "GAFFE: ${PROG_NAME} exited abnormally!"
    >&2 echo "- Hint: Enable \`set -x\` and run again..."
  fi
}

# ***

main () {
  set -e

  trap exit_cleanup EXIT

  eapp_gh_aliases_setup "$@"

  # Unhook exit_cleanup.
  trap - EXIT
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
  # Being executed, so execute.
  main "$@"
fi

unset -f main

