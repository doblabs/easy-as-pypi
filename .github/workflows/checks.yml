# vim:tw=0:ts=2:sw=2:et:norl
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/doblabs/easy-as-pypi#ðŸ¥§
# License: MIT
# yamllint disable rule:line-length

---

# USYNC: The jobs below should include most of the same jobs as the
#        Makefile 'lint' recipe and the tox.ini 'labels' setting.
#        - Except skip 'linkcheck', which usually fails before
#          docs are published. Chicken before the egg.

name: Checks â€” Runner

on:
  workflow_call:

# ***

env:
  # TRACK: https://github.com/actions/python-versions/releases
  # USYNC: workflows/ (PYTHON_VERSION), tox.ini (basepython), Makefile (VENV_PYVER).
  PYTHON_VERSION: 3.11

  # USAGE: Set RUN_ONLY to restrict to specific job, e.g.,
  #
  #   RUN_ONLY: "doc8-poetry"
  #
  # Note that a job-level `if` does not export `env`, so we
  # do this at the step level and use `exit 1` to fail the job.
  # CXREF: https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
  # - Shows `jobs.<job_id>.if` loads contexts: github, needs, vars, and inputs.
  #
  RUN_ONLY: ""

jobs:

  # *** Project Task Disablement

  disablement-detector:
    name: Inspect Makefile.project for opt-outs

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use an intermediate Makefile to probe project Makefile.
      # - As mentioned above, skipping:  EAPP_MAKEFILE_LINKCHECK_DISABLE
      - name: Check if project disabled this task
        id: read-environs
        run: |

          for var_name in \
            "EAPP_MAKEFILE_DOCS_DISABLE" \
            "EAPP_MAKEFILE_PYDOCSTYLE_DISABLE" \
          ; do
            var_value="$(make -f <(
              echo -e \
                "-include Makefile.project\nprint_value:\n\t@echo \$(${var_name})"
            ) print_value)"

            environ_value=$([ -z "${var_value}" ] && echo "false" || echo "true")

            echo "${var_name}=${environ_value}"

            echo "${var_name}=${environ_value}" >> "${GITHUB_OUTPUT}"
          done

    outputs:
      EAPP_MAKEFILE_DOCS_DISABLE: ${{ steps.read-environs.outputs.EAPP_MAKEFILE_DOCS_DISABLE }}
      EAPP_MAKEFILE_PYDOCSTYLE_DISABLE: ${{ steps.read-environs.outputs.EAPP_MAKEFILE_PYDOCSTYLE_DISABLE }}

  # *** TEST

  test:
    runs-on: ${{ matrix.platform }}

    # CXREF: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      fail-fast: true
      matrix:
        platform: ['ubuntu-latest']
        # TRACK: https://github.com/actions/python-versions/releases
        # LATER/2023-11-04: Latest 3.13.0-alpha.1 not working yet:
        #   Poetry installation failed.
        #   See /home/runner/work/easy-as-pypi/easy-as-pypi/poetry-installer-error-6onruz7x.log
        #         for error logs.
        #   Error: Process completed with exit code 1.
        # - Reenable this eventually:
        #  python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13.0-alpha.1']
        # USYNC: Update GitHub Branch protection rules when you modify this list! E.g.,
        #   https://github.com/doblabs/easy-as-pypi/settings/branch_protection_rules/37797347
        # USYNC: checks.yml (here), tox.ini (envlist), Makefile (pyenv-install-pys).
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

        # DUNNO/2022-10-04: GitHub doesn't always spin up macOS and Windows
        # immediately ("Waiting for runner to start this task..."). And on
        # private repos, they charge more per minute than Ubuntu (not that
        # that affects free projects).
        # - Windows is also a lot slower. I see checkout alone ~45s!
        #   - Versus 1s on Ubuntu! (Ridiculously slower.)
        # - So, I dunno, don't bother with old Python on macOS and Windows.
        #   (Although if people report issues on missing Python versions,
        #    then consider enabling.)
        #   - Instead of using a platform array:
        #       platform: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        #     Use matrix.include to add specific platform-Python combinations.
        include:
          - platform: 'macos-latest'
            python-version: '3.12'
          - platform: 'windows-latest'
            python-version: '3.12'

    # Set the default shell, required for "windows-latest".
    defaults:
      run:
        shell: bash

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      # CXREF: https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # CXREF: https://github.com/actions/setup-python
      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # FIXME/2023-05-21: See comments elsewhere: Consider replacing
          # or complementing USYNC_PIP_CACHE mechanism with setup-python
          # cache.
          # - CXREF: https://github.com/actions/setup-python#caching-packages-dependencies
          #
          #  cache: 'poetry' # cache virtualenv dir

      # Cache the pip wheels (avoid re-downloading from PyPI), and give
      # install-poetry a boost. Shaves ~10s off step time, from 15s to 5s.
      # - Enable `virtualenvs-in-project` so local .venv/ is used and cached.
      # - With or without caches, Windows takes a longer time.
      #   - 2022-10-04: This test job took 4m. The install-poetry took 2m.
      #     With the cache ready on the next run, install-poetry took 54s.
      #     And with both caches used, the 4m job run was reduced to 1m 38s.
      #     Still a lot longer than Ubuntu, but also a decent improvement.
      #   - 2023-05-21: easy-as-pypi test job v3.8 took 44s (cached).
      # - Note the cache key: It invalidates cache whenever this Yaml changed.
      # CXREF:
      #   https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
      #   https://github.com/snok/install-poetry/
      #   https://github.com/actions/cache
      # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
      - name: Set pip wheels path (Ubuntu/macOS)
        run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
        shell: bash
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
      - name: Set pip wheels path (Windows)
        run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
        shell: bash
        if: runner.os == 'Windows'
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE }}
          key: dotlocal-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # 2022-10-04: Cache the virtualenv, avoid re-installing packages.
      # Saves ~35s from step time, from 35s to 0s (b/c skips step, because `if:`).
      # - The install-poetry doc says that, for ubuntu-latest and macos-latest,
      #   the path is:
      #     path: .venv
      #   But the the windows-latest example uses a different path.
      #     path: {cache-dir}/virtualenvs
      #   (Though the cached-pip-wheels example shows `path: ~/.cache`.)
      #   And they suggest caching pip wheels, not the venv (which saves
      #   downloading from PyPI, but not from installing).
      #   - REFER: https://github.com/snok/install-poetry/#running-on-windows
      # - The Peterbe article adds the Yaml hash to the key, which seems legit.
      #   The causes a cache miss if you edit this file, causing a fresh install...
      #   though maybe we don't need to be that aggressive?
      #   - REFER: https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
      # - BWARE: install-poetry warns that Windows sometimes hangs on this step.
      #     https://github.com/snok/install-poetry/#caching-on-windows-runners
      #   So they recommend caching pip wheels instead of .venv.
      # USYNC_LOAD_VENV: Multiple jobs in this Yaml share the following steps.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ github.job
            }}-${{ hashFiles('**/poetry.lock')
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with test,project_test

      - name: Test
        run: |
          poetry run make test
          # DEVs: If you need to test a specific function or class, try, e.g.,:
          #   poetry run python -m pytest -k test_function tests/

        # If you wanted to send an environ to the run task, you could set one,
        # e.g.,
        #
        #   env:
        #     PLATFORM: ${{ matrix.platform }}

  # *** SAVVY

  # While it might be nice to isolate jobs in separate Yaml files, each
  # file is its own workflow, and each workflow appears separately under
  # the Actions workflow list, so easier to examine results if you keep
  # all jobs related to the same push or PR within the same workflow.
  # - At least when possible: Workflows that run after checks complete
  #   cannot be combined herein, e.g., those using `workflow_run` opt.:
  #
  #    on:
  #      workflow_run:
  #        workflows: ["Checks â€” Runner"]
  #        types:
  #          - completed

  # *** BLACK

  black:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --with lint,project_lint

      - name: Run black
        run: poetry run black $SOURCE_DIR --check
        env:
          SOURCE_DIR: src/

  # *** FLAKE8

  flake8:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
      - name: Set pip wheels path (Ubuntu/macOS)
        run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
        shell: bash
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
      - name: Set pip wheels path (Windows)
        run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
        shell: bash
        if: runner.os == 'Windows'
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE }}
          key: dotlocal-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Suss pseudo subproject directory name
        run: echo "PYPROJECT_DOC8_DIR=$(echo "$(grep -e 'PYPROJECT_DOC8_DIR = ' Makefile | sed 's/^.* = //')")" >> $GITHUB_ENV
        shell: bash

      # USYNC: The cache path is different for this job, because the pseudo
      #        subproject is used, so we use the subproject's `.venv/`.
      #        - CXREF: .pyproject-doc8/pyproject.toml
      # USYNC_LOAD_VENV: Multiple jobs in this Yaml share the following steps.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          # Because the pseudo subproject is used, use subproject's `.venv/`.
          #  path: .venv
          path: ${{ env.PYPROJECT_DOC8_DIR }}/.venv
          key: venv-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ github.job
            }}-${{ hashFiles('**/poetry.lock')
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with lint,project_lint

      - name: Run flake8
        run: poetry run make flake8

  # *** ISORT

  # FIXME/2023-05-21: Replace USYNC_PIP_CACHE and USYNC_LOAD_VENV
  # with this approach (which I think is more newly supported than
  # the USYNC_* cache code I wrote 2022-10).
  # - FIXME: But first, check that the two approaches are complementary.
  #   (I.e., maybe the old implementation has not been superseded by
  #    actions/setup-python@v4's cache mechanism.)

  isort:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --with lint,project_lint

      - name: Run isort
        run: poetry run make isort_check_only

  # *** DOC8-PIP

  doc8-pip:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      # CXREF: https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # CXREF: https://github.com/actions/setup-python
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # "cache the global cache directory"
          # CXREF: https://github.com/actions/setup-python#caching-packages-dependencies
          #   https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#caching-packages
          cache: 'pip'
          # DUNNO/2023-05-22: Need cache-dependency-path for a pyproject.toml project?
          #  cache-dependency-path: '**/requirements-dev.txt'

      # USYNC: Similar to `make_doc8_pip` in 'Maketasks.sh'.

      - name: Install dependencies
        run: pip install -U pip doc8>="1.1.1"

      - name: Run doc8
        run: python -m doc8 *.rst docs/

  # *** DOC8-POETRY

  doc8-poetry:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      # CXREF: https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      # CXREF: https://github.com/actions/setup-python
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # "cache the global cache directory"
          # CXREF: https://github.com/actions/setup-python#caching-packages-dependencies
          #   https://github.com/actions/setup-python/blob/main/docs/advanced-usage.md#caching-packages
          cache: 'poetry'

      # Example how to avoid hardcoding paths defined elsewhere.
      - name: Suss pseudo subproject directory name
        run: echo "PYPROJECT_DOC8_DIR=$(echo "$(grep -e 'PYPROJECT_DOC8_DIR = ' Makefile | sed 's/^.* = //')")" >> $GITHUB_ENV
        shell: bash

      # # Prints, e.g., ".pyproject-doc8".
      #
      # - name: Dump PYPROJECT_DOC8_DIR (Bash)
      #   run: echo "${{ env.PYPROJECT_DOC8_DIR }}"
      #   shell: bash

      # USYNC: Similar to `make_doc8_poetry` in 'Maketasks.sh'.

      # Use poetry -C option, and not, e.g., `cd <dir> && poetry install`
      # lest various issues, including wrong Python version detected, and
      # weird Poetry failure:
      #   virtualenv: error: argument --prompt: expected one argument
      - name: Install dependencies
        # E.g.,
        #   run: poetry install -C ".pyproject-doc8/" --no-interaction --no-root --with dev
        run: poetry install -C "${{ env.PYPROJECT_DOC8_DIR }}" --no-interaction --no-root --with dev
        # shell: bash

      - name: Run doc8
        run: poetry run -C "${{ env.PYPROJECT_DOC8_DIR }}" python -m doc8 *.rst docs/

  # *** DOCS

  docs:
    runs-on: ubuntu-latest

    needs: disablement-detector

    if: needs.disablement-detector.outputs.EAPP_MAKEFILE_DOCS_DISABLE != 'true'

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
      - name: Set pip wheels path (Ubuntu/macOS)
        run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
        shell: bash
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
      - name: Set pip wheels path (Windows)
        run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
        shell: bash
        if: runner.os == 'Windows'
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE }}
          key: dotlocal-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # USYNC_LOAD_VENV: Multiple jobs in this Yaml share the following steps.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ github.job
            }}-${{ hashFiles('**/poetry.lock')
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with docs,project_docs --extras readthedocs

      - name: Docs build
        run: poetry run make _docs_html_skip_venv

  # *** TWINE-CHECK

  twine-check:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
      - name: Set pip wheels path (Ubuntu/macOS)
        run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
        shell: bash
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
      - name: Set pip wheels path (Windows)
        run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
        shell: bash
        if: runner.os == 'Windows'
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE }}
          key: dotlocal-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # USYNC_LOAD_VENV: Multiple jobs in this Yaml share the following steps.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ github.job
            }}-${{ hashFiles('**/poetry.lock')
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dist,project_dist

      # Verifies bdist and sdist archives.
      - name: Dist check
        run: poetry run make twine-check

  # *** POETRY-CHECK

  poetry-check:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
      - name: Set pip wheels path (Ubuntu/macOS)
        run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
        shell: bash
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
      - name: Set pip wheels path (Windows)
        run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
        shell: bash
        if: runner.os == 'Windows'
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE }}
          key: dotlocal-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        # Not necessary, because we're not caching .venv/:
        #  with:
        #    virtualenvs-create: true
        #    virtualenvs-in-project: true

      # Verifies pyproject.toml.
      - name: Poetry check
        run: make poetry-check

  # *** PYDOCSTYLE

  # Note that adding Docstrings can be tedious. For many projects, they
  # might not add value. So oftentimes you'll want to disable this job:
  #
  #   pydocstyle:
  #     if: false  # Also works: ${{ false }}

  pydocstyle:
    runs-on: ubuntu-latest

    needs: disablement-detector

    if: needs.disablement-detector.outputs.EAPP_MAKEFILE_PYDOCSTYLE_DISABLE != 'true'

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
      - name: Set pip wheels path (Ubuntu/macOS)
        run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
        shell: bash
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
      - name: Set pip wheels path (Windows)
        run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
        shell: bash
        if: runner.os == 'Windows'
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE }}
          key: dotlocal-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # USYNC_LOAD_VENV: Multiple jobs in this Yaml share the following steps.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ github.job
            }}-${{ hashFiles('**/poetry.lock')
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with docstyle,project_docstyle

      - name: Docstring check
        run: poetry run make pydocstyle

  # *** COVERAGE

  coverage:
    runs-on: ubuntu-latest

    # MAYBE/2023-05-21: We could restrict to the release branch, e.g.,
    #
    #   if: github.ref == 'refs/heads/release'
    #
    # But I'm curious about seeing coverage reports for PRs (and possibly
    # coverage diffs), so not doing this until I understand better how it
    # all works.

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # USYNC_PIP_CACHE: Multiple jobs in this Yaml share the following steps.
      - name: Set pip wheels path (Ubuntu/macOS)
        run: echo "PIP_CACHE=~/.local" >> $GITHUB_ENV
        shell: bash
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
      - name: Set pip wheels path (Windows)
        run: echo "PIP_CACHE=~/AppData/Local/pip/cache" >> $GITHUB_ENV
        shell: bash
        if: runner.os == 'Windows'
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ${{ env.PIP_CACHE }}
          key: dotlocal-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # USYNC_LOAD_VENV: Multiple jobs in this Yaml share the following steps.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os
            }}-${{ steps.setup-python.outputs.python-version
            }}-${{ github.job
            }}-${{ hashFiles('**/poetry.lock')
            }}-${{ hashFiles('.github/workflows/checks.yml')
            }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with test,project_test

      - name: Coverage compute
        run: poetry run make _coverage_xml

      # Wired to CODECOV_TOKEN repository or organization secret.
      # CXREF: https://app.codecov.io/gh/doblabs/easy-as-pypi/new
      #   https://github.com/codecov/codecov-action
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # Multiple files allowed, e.g.,
          #  files: ./coverage1.xml,./coverage2.xml # optional
          files: ./coverage.xml
          # COPYD: Remaining are from Action README:
          #  flags: unittests # optional
          #  name: codecov-umbrella # optional
          # - fail_ci_if_error: "Specify if CI pipeline should fail when
          #   Codecov runs into errors during upload"
          #   - Though unsure if fails just this job, or the whole workflow.
          fail_ci_if_error: true  # optional (default = false)
          #  verbose: true # optional (default = false)

  # *** YAMLLINT

  yamllint:
    runs-on: ubuntu-latest

    steps:
      - name: Fail if RUN_ONLYing another job
        run: exit 1
        if: ${{ env.RUN_ONLY && env.RUN_ONLY != github.job }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --with lint,project_lint

      - name: Run yamllint
        run: poetry run yamllint .
