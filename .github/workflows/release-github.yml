# vim:tw=0:ts=2:sw=2:et:norl
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/doblabs/easy-as-pypi#ðŸ¥§
# License: MIT

---

name: Release build to GitHub

# Invoked from "Run checks" (checks.yml) workflow via job "uses" directive.
# - Running from checks means this workflow never has to check state -- we
#   know the tag is a version tag, and that the tag commit has passed checks.

on:
  workflow_call:
    inputs:
      version_tag:
        required: true
        type: string

env:
  # USYNC: https://github.com/actions/python-versions/releases
  # - USYNC: PYTHON_VERSION usage in .github/workflows/*.
  PYTHON_VERSION: 3.11

jobs:

  verify-version-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Check Tag
        id: check-is-version-tag
        # Note that checks.yml only calls this workflow with version tags,
        # so this check is unnecessary (always true).
        run: |
          if [[ ${VERSION_TAG} =~ ^v?[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "is_version_tag=true" >> $GITHUB_OUTPUT
          fi
        env:
          VERSION_TAG: ${{ inputs.version_tag }}

      - name: Report Maybe
        if: steps.check-is-version-tag.outputs.is_version_tag == 'true'
        run: echo "Version tag detected"

      - name: Checkout repository
        uses: actions/checkout@v3
        if: steps.check-is-version-tag.outputs.is_version_tag == 'true'

    outputs:
      is_version_tag: ${{ steps.check-is-version-tag.outputs.is_version_tag }}

  release-github:
    runs-on: ubuntu-latest

    needs: verify-version-tag
    if: needs.verify-version-tag.outputs.is_version_tag == 'true'

    env:
      TOKENTEST: ${{ secrets.TEST_TOKEN }}

    permissions:
      # For `gh release view`, else you see: "HTTP 403: Resource not accessible
      # by integration (https://api.github.com/repos/pydob/easy-as-pypi/releases)"
      contents: 'write'

    steps:
      - name: Probe version
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> "$GITHUB_ENV"
        shell: bash

      - name: Check if prerelease
        # Note the v?: Don't care!
        run: |
          echo "$VERSION_TAG" | grep -q -E -e "^v?[0-9]+\.[0-9]+\.[0-9]+$" \
            || echo "PRERELEASE=--prerelease" >> "$GITHUB_ENV"

      - name: Announcement
        run: |
          [ -z "${PRERELEASE}" ] \
            && prerelease_msg="" \
            || prerelease_msg=" (prerelease)"
          echo "Processing $VERSION_TAG tag${prerelease_msg}"

      # ***

      # Checkout the default branch and check the version tag is on HEAD.
      # - This is mostly a paranoid check. We could support releasing
      #   whatever commit was tagged, but until a developer presents us
      #   with a compelling use case for such a situation, we don't
      #   support it.
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          # Fetch all history, so rev-parse HEAD is real HEAD.
          fetch-depth: 0

      # Compare default branch HEAD and workflow event GITHUB_SHA.
      - name: Verify default branch HEAD is what was tagged
        run: |
          [ "$GITHUB_SHA" = "$(git rev-parse HEAD)" ] || exit 1

      # ***

      - name: Fail if already released
        run: |
          echo "gh release view \"$VERSION_TAG\""
          ! gh release view "$VERSION_TAG" \
            || exit 1
        env:
          GH_TOKEN: ${{ secrets.PAT__PUBLIC_REPO }}

      # ***

      - name: Install poetry
        run: pipx install poetry

      - name: Install poetry-dynamic-versioning
        run: poetry self add "poetry-dynamic-versioning[plugin]"

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Poetry build
        run: |
          poetry build

      - name: Probe filename
        run: |
          echo "ASSET_BDIST=$(command echo dist/*.whl)" >> "$GITHUB_ENV"
          echo "ASSET_SDIST=$(command echo dist/*.tar.gz)" >> "$GITHUB_ENV"
        shell: bash

      - name: Inspect work
        run: |
          echo
          echo "ASSET_BDIST: $ASSET_BDIST"
          ls -la "$ASSET_BDIST"
          echo
          echo "ASSET_SDIST: $ASSET_SDIST"
          ls -la "$ASSET_SDIST"

      # ***

      # CXREF: https://cli.github.com/manual/gh_release_create
      # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
      #
      # Options:
      #   -p/--prerelease     marks release as prerelease (see $PRERELEASE).
      #   --verify-tag        aborts release if the tag doesn't already exist
      #                       (but that should be impossible).
      - name: Create release
        run: |
          echo "gh release create \"$VERSION_TAG\" \
            --title \"$VERSION_TAG\" \
            $PRERELEASE \
            --verify-tag \
            $ASSET_BDIST#bdist â€” $(basename $ASSET_BDIST) \
            $ASSET_SDIST#sdist â€” $(basename $ASSET_SDIST)"
          gh release create "$VERSION_TAG" \
            --title "$VERSION_TAG" \
            $PRERELEASE \
            --verify-tag \
            "$ASSET_BDIST#bdist â€” $(basename $ASSET_BDIST)" \
            "$ASSET_SDIST#sdist â€” $(basename $ASSET_SDIST)"
        env:
          # Note that the built-in token doesn't generate workflow events.
          # - E.g.,
          #     GH_TOKEN: ${{ github.token }}
          #   will not signal on.release.
          # - Instead, use a personal access token (a classic token
          #   with public_repo permission), which evokes the trigger.
          # CXREF:â€ƒhttps://docs.github.com/en/actions/using-workflows/triggering-a-workflow#triggering-a-workflow-from-a-workflow
          GH_TOKEN: ${{ secrets.PAT__PUBLIC_REPO }}

# ***
