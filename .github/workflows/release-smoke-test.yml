# vim:tw=0:ts=2:sw=2:et:norl
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/doblabs/easy-as-pypi#🥧
# License: MIT

---

# USYNC: This name is used by `gh workflow run`.
# - Search for: 'PyPI Smoke test'
name: PyPI Smoke test

run-name: 🎒 — Smoke test — ${{ inputs.VERSION }} ... & Cascade dispatch

on:
  workflow_dispatch:
    inputs:
      INDEX_PIP:
        required: false
        type: string
      INDEX_PIPX:
        required: false
        type: string
      PACKAGE_NAME:
        required: true
        type: string
      VERSION:
        required: true
        type: string
      PRERELEASE:
        required: true
        type: boolean

# ***

env:
  # Lest: "The `python-version` input is not set. The version
  #        of Python currently in `PATH` will be used." and
  #       "Cache paths are empty. Please check the previous
  #        logs and make sure that the python version is specified"
  # TRACK: https://github.com/actions/python-versions/releases
  # USYNC: workflows/ (PYTHON_VERSION), tox.ini (basepython), Makefile (VENV_PYVER).
  # BWARE: Trailing zeroes disappear unless quoted.
  PYTHON_VERSION: "3.11"

jobs:
  pip-smoke-test:
    name: pip Smoke test PyPI release

    runs-on: ubuntu-latest

    env:
      INDEX_PIP: ${{ inputs.INDEX_PIP }}
      PACKAGE_NAME: ${{ inputs.PACKAGE_NAME }}
      VERSION: ${{ inputs.VERSION }}

    steps:
      # Checkout the project or actions/setup-python dies, "Error: No file
      # in <path> matched to [**/requirements.txt or **/pyproject.toml]...."
      # - This because 'cache: pip' uses pyproject.toml hash as part of the
      #   cache key.
      # - REFER: https://github.com/actions/setup-python
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # ***

      # DUNNO: pip-install sometimes won't find the version
      # (even if a previous workflow or job ran the exact
      # same pip-install command and found success, bizarre).
      # - So we'll retry a few times until universe settles.

      # REFER: https://github.com/nick-fields/retry
      - name: Install package
        uses: nick-fields/retry@v2
        with:
          retry_on: error
          max_attempts: 5
          retry_wait_seconds: 5
          # Timeout shouldn't matter, but it's required.
          #  timeout_minutes: 10
          timeout_seconds: 60
          command: |
            echo "pip install $INDEX_PIP $PACKAGE_NAME==$VERSION"
            pip install $INDEX_PIP $PACKAGE_NAME==$VERSION

      - name: Infer module name
        run: |
          pip install yq

          trim_null="select( . != null )"

          module_name="$(
            tomlq -r ".tool.poetry.packages[0].include | ${trim_null}" "pyproject.toml"
          )"

          if [ -z "${module_name}" ]; then
            module_name="${PACKAGE_NAME//-/_}"
          fi

          echo "MODULE_NAME=${module_name}" >> "$GITHUB_ENV"
        shell: bash

      - name: Check version
        run: |
          python -c "import $MODULE_NAME; print($MODULE_NAME.__version__)"

          [ "${VERSION}" = \
            "$(python -c "import $MODULE_NAME; print($MODULE_NAME.__version__)")" ] \
            || exit 1
        shell: bash

  # ***

  # pipx won't install lib-only package, e.g., one without entry point defined.
  #
  # - Otherwise pipx complains:
  #
  #     No apps associated with package easy-as-pypi-appdirs or its dependencies. If
  #     you are attempting to install a library, pipx should not be used. Consider
  #     using pip or a similar tool instead.
  #
  # So do a crude toml grep to see if the Poetry entry point is defined.

  check-is-app:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # If pre-release, use alternative branch if defined.
          # (Not that pyproject.toml likely to differ btw. the
          #  two, but could, so better honor ourselves.)
          ref: ${{
            inputs.PRERELEASE == 'true'
            && vars.PRERELEASE_BRANCH
            || github.event.repository.default_branch }}

      - name: Check Tag
        id: check-is-app
        run: |
          if grep -q -E "^\[tool.poetry.scripts]$" "pyproject.toml"; then
            echo "is_app=true" >> $GITHUB_OUTPUT
          fi

      - name: Report Maybe
        if: steps.check-is-app.outputs.is_app == 'true'
        run: |
          branch_name="$(git rev-parse --abbrev-ref=loose HEAD)"
          echo "Installs-app detected (branch “${branch_name}”)"

    outputs:
      is_app: ${{ steps.check-is-app.outputs.is_app }}

  # ***

  pipx-smoke-test:
    name: pipx Smoke test PyPI release

    runs-on: ubuntu-latest

    needs: check-is-app
    if: needs.check-is-app.outputs.is_app == 'true'

    env:
      INDEX_PIPX: ${{ inputs.INDEX_PIPX }}
      PACKAGE_NAME: ${{ inputs.PACKAGE_NAME }}
      VERSION: ${{ inputs.VERSION }}

    steps:
      # Checkout project or actions/setup-python dies. See comments above.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # ***

      - name: Infer version command
        id: infer-version-command
        run: |
          pip install yq

          trim_null="select( . != null )"

          version_cmd="$(
            tomlq -r \
              ".tool.easy_as_pypi.smoke_test_version | ${trim_null}" \
              "pyproject.toml"
          )"

          if [ -z "${version_cmd}" ]; then
            version_cmd="$PACKAGE_NAME version"
          fi

          echo "version_cmd=${version_cmd}" >> "$GITHUB_OUTPUT"

      # ***

      # See comment above: The first one or few pipx-install don't
      # always find the version.
      # - 2023-10-08: So far I've only ever seen one retry needed,
      #   and that included a time when pip-install ran immediately,
      #   then pipx-install had to be run twice.

      - name: Install package
        uses: nick-fields/retry@v2
        with:
          retry_on: error
          max_attempts: 5
          retry_wait_seconds: 5
          timeout_seconds: 60
          # The `eval` necessary because "quotes" in $INDEX_PIPX
          # - If not: 'pipx: error: unrecognized arguments: --pre"'
          #   (at least for pre-release release smoke test).
          command: |
            echo "eval pipx install $INDEX_PIPX $PACKAGE_NAME==$VERSION"
            eval pipx install $INDEX_PIPX $PACKAGE_NAME==$VERSION

      # Note the poetry-dynamic-versioning works with non-SemVer versions
      # but will make them SemVer-compliant, e.g., it'll change the alpha
      # tag "v1.1.0a3" (non-Semver) to "1.1.0-a.3" (which is SemVer-okay).
      # - On GH and PyPI it's still the original tag, because the
      #   workflow uses the Git tag.
      #   - E.g., given previous example,
      #       pipx install easy-as-pypi==1.1.0a3
      #     works, but `easy-as-pypi version` says:
      #       easy-as-pypi version 1.1.0-a.3
      # - FTREQ/2023-06-04: Validate version in `release-github.yml`:
      #   - Run `poetry dynamic-versioning`.
      #   - Parse Toml to confirm version.
      #   - Cleanup with `git reset --hard HEAD`.
      #   - UCASE: Prevent getting here and failing because PyPI version
      #            and application version are different.
      - name: Run it!
        run: |
          version_cmd="${{ steps.infer-version-command.outputs.version_cmd }}"
          echo "Checking <app-name> version » $VERSION"
          echo "\$ ${version_cmd}"
          ${version_cmd}
        shell: bash

      - name: Check version
        run: |
          version_cmd="${{ steps.infer-version-command.outputs.version_cmd }}"
          [ "$($version_cmd)" = \
            "$(echo ${version_cmd} | cut -d' ' -f1) version $VERSION" ] \
            || exit 1
        shell: bash

  # ***

  spread-updates:
    name: Run update & release cascade

    uses: ./.github/workflows/spread-updates.yml
    secrets: inherit

    needs: [pip-smoke-test, pipx-smoke-test]

    if: ${{ ! cancelled()
      && needs.pip-smoke-test.result == 'success'
      && (needs.pipx-smoke-test.result == 'success'
          || needs.pipx-smoke-test.result == 'skipped'
      ) }}

    with:
      prerelease: ${{ inputs.PRERELEASE }}
