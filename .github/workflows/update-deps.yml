# vim:tw=0:ts=2:sw=2:et:norl
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/doblabs/easy-as-pypi#ðŸ¥§
# License: MIT

---

name: Release Cascade â€” Update

run-name: ðŸ‘£ â€” Cascade â€” 2.) Update deps (via ${{
  github.event_name == 'workflow_dispatch' && 'User' || 'Upstream' }})

on:
  # Via update-cascade.yml
  repository_dispatch:
    types: [update-deps]

  # Via GitHub Actions website button
  workflow_dispatch:
    inputs:
      increment-version:
        description: 'Increment version'
        type: boolean
        default: true
      cascade-dispatch:
        description: 'Start the cascade!'
        type: boolean
        default: false

# ***

env:
  # USYNC: https://github.com/actions/python-versions/releases
  # - USYNC: PYTHON_VERSION usage in .github/workflows/*.
  PYTHON_VERSION: 3.11

jobs:
  poetry-update:
    name: Update lock deps

    runs-on: ubuntu-latest

    steps:
      # SAVVY: How we'd access repository_dispatch args if we needed to add any:
      #  - run: |
      #      echo "event.client_payload.sha: ${{ github.event.client_payload.sha }}"
      #      echo "event.client_payload.ref: ${{ github.event.client_payload.ref }}"

      - name: Checkout this repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          # Use the user token, not ${{ github.token }}, so that
          # git-push triggers workflow events. (Though TBH I don't
          # remember if it's the token setting here or the one on
          # bin/update-poetry, below that does this.)
          #  token: ${{ github.token }}
          token: ${{ secrets.USER_PAT }}

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Run bin/update-poetry
        id: run-update-poetry
        # Run poetry-update.
        # - DEVXX: Set UPDEPS_FAKE_UPDATE=true to fake poetry.lock update,
        #          e.g., if you're testing inter-workflow flow.
        run: |
          new_pr_num="$( \
            UPDEPS_FAKE_UPDATE=true \
            REPO_ORG_PROJ="${{ github.repository }}" \
            ./.github/bin/update-poetry
          )"
          pr_head_ref="$(git rev-parse HEAD)"
          echo "new_pr_num=${new_pr_num}" >> $GITHUB_OUTPUT
          echo "pr_head_ref=${pr_head_ref}" >> $GITHUB_OUTPUT
        env:
          # Send both tokens so update-poetry can run gh and self-approve PR.
          USER_TOKEN: ${{ secrets.USER_PAT }}
          GBOT_TOKEN: ${{ github.token }}

    outputs:
      new_pr_num: ${{ steps.run-update-poetry.outputs.new_pr_num }}
      pr_head_ref: ${{ steps.run-update-poetry.outputs.pr_head_ref }}

  # ***

  wrangle-ci-tags:
    name: Wrangle CI tags

    needs: poetry-update

    if: needs.poetry-update.result == 'success'
      && github.event_name == 'workflow_dispatch'

    # steps:
    #   - name: Manage CI tags
    uses: ./.github/workflows/ci-tags-record-and-report.yml

    with:
      head-ref: ${{ needs.poetry-update.outputs.pr_head_ref }}
      inhibit-cascade: ${{ ! inputs.cascade-dispatch }}
      ignore-pr-merged-event: ${{ ! inputs.increment-version }}
      ignore-pr-merged-number: "${{
        fromJSON(needs.poetry-update.outputs.new_pr_num) || 0
      }}"

  # ***

  # If no PR, continue cascade; otherwise update-merged.yml workflow
  # will continue cascade after PR is merged, and new package version
  # is released.
  update-cascade:
    name: "Cascade maybe"

    uses: ./.github/workflows/update-cascade.yml
    secrets: inherit

    needs: poetry-update

    if: |
      needs.poetry-update.result == 'success'
        && needs.poetry-update.outputs.new_pr_num == ''
        && (github.event_name != 'workflow_dispatch'
            || inputs.cascade-dispatch == 'true')
