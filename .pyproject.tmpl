{#- PLEASE EDIT — YOU MAY EDIT THIS FILE — .pyproject.tmpl — THIS IS CANON -#}

# DO NOT EDIT. This file #generated by easy-as-pypi {{ easy_as_pypi.version }}

# vim:tw=0:ts=4:sw=4:et:norl:ft=toml
# Author: {{ project.author }}
# Project: {{ project.url }}
# License: {{ project.license }}

# Copyright (c) © {{ project.copy_years_owner }}. All Rights Reserved.

{#- CXREF: How Jinja inheritence works:
 # https://jinja.palletsprojects.com/en/3.1.x/templates/#template-inheritance
-#}

{#- SAVVY: The {%- whitespace trimmers -%} work this way:
 #  - In this document, the outer trimmers work, e.g.,:
 #      {%- block foo %}
 #      Main template.
 #      {% endblock -%}
 #  - In the child templates, the inner trimmers work, e.g.,:
 #      {% block foo -%}
 #      Child template.
 #      {%- endblock %}
 #    - Unless there is no child template, in which case this
 #      file's template's inners work.
#}

{% block project_meta -%}

[tool.poetry]
# etc.

{% endblock -%}

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# The standard Poetry build system is these two lines:
#
#   requires = ["poetry-core"]
#   build-backend = "poetry.core.masonry.api"
#
# But we use poetry-dynamic-versioning so we don't have to maintain
# the `version` variable atop this file.

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# HSTRY: Pre-Poetry, most devs used setuptools and distutils to release.
# And savvy developers used the setuptools_scm plugin to ease the version
# burden, so they wouldn't have to manually change the `setup.py` version
# value for every release. Instead, setuptools_scm would find the latest
# application version from the VCS tags, and it would use that on build.
#
# - Here's the Poetry equivalent, poetry-dynamic-versioning:
#
#   https://github.com/mtkennerly/poetry-dynamic-versioning
#   https://pypi.org/project/poetry-dynamic-versioning
#
# Note that poetry-dynamic-versioning is not as as wired into the build
# as setuptools_scm was: poetry-dynamic-versioning edits files in-place
# during the build, so you might see a flutter in your editor if you've
# got this file buffered.

# RTFD_: We set 'pattern' below to support v-less versions (e.g., '1.2.3'):
#          pattern = "default-unprefixed"
#
# - By default, the plugin only supports v-prefixed tags (e.g., 'v1.2.3').
# - If the plugin cannot find a matching tag, it'll kill the Poetry task,
#   such as poetry-check, -build, -install, and spit out a bunch of regex.
# - BWARE: The plugin output is not super obvious, or at least if wasn't
#   to me as a new user, when I simply had `enable = true` below and
#   had not learned about nor had added the `pattern =` line yet.
#   - E.g., here's what I saw trying to build with v-less tags:
#
#       The pattern did not match any tags
#
#       Pattern:
#       (?x)                                                          (?# ignore whitespace)
#           ^v((?P<epoch>\d+)!)?(?P<base>\d+(\.\d+)*)                 (?# v1.2.3 or v1!2000.1.2)
#           ([-._]?((?P<stage>[a-zA-Z]+)[-._]?(?P<revision>\d+)?))?   (?# b0)
#           (\+(?P<tagged_metadata>.+))?$                             (?# +linux)
#
#       Tags:
#       ['1.0.13', '1.0.12', '1.0.11', '1.0.10', '1.0.9', '1.0.8', ...]
#
#     So, if you see you a message like this, it means the plugin
#     could not identify a version tag to use.
#
#   - REFER: I was also not the only one confused by this:
#     https://github.com/mtkennerly/poetry-dynamic-versioning/issues/111
#
#   - REFER: For even more TMI: The 'pattern' names ('default' and
#     'default-unprefixed') and regex are from Dunamai:
#     https://github.com/mtkennerly/dunamai/blob/c52cad8/dunamai/__init__.py#L113

[tool.poetry-dynamic-versioning]

enable = true

# See long comment above.
pattern = "default-unprefixed"

vcs = "git"

# Leave style = "pep440", not "semver", to maybe PyPI normalization.
#  style = "pep440"

# USYNC: The main/default GH branch: 'release'.
# SAVVY: If you see 'fatal: malformed object name release' after:
#          poetry self add "poetry-dynamic-versioning[plugin]"
#        Check that the 'release' branch exists.
# ISOFF: Don't need this, just run against current branch.
#  tag-branch = "release"

[tool.poetry-dynamic-versioning.substitution]

# Default 'files':
#  files = ["*.py", "*/__init__.py", "*/__version__.py", "*/_version.py"]
# - Note these paths only look one deep. You could recurse with **, e.g.:
#    files = ["**/__init__.py"]
# Just the one file, src/<pkg>/__init__.py.
files = ["src/*/__init__.py"]

# The default 'patterns' pattern is the non-escaped value:
#  patterns_unescaped = ["(^__version__\s*(?::.*?)?=\s*['\"])[^'\"]*(['\"])"]
# which needs to be double-escaped and triple-double-quote-escaped
# to work in Toml (that is, this pattern works if you want to tinker):
#  patterns = ["(^__version__\\s*(?::.*?)?=\\s*['\\\"])[^'\\\"]*(['\\\"])"]
# Fortunately the default 'patterns' pattern is usually perfect.

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# pytest options
# ==============
#
# - pytest settings can be set in any of these files:
#
#     pytest.ini / pyproject.toml / tox.ini / setup.cfg
#
#   though it's recommended to avoid the latter.
#
# - Ref:
#
#     https://docs.pytest.org/en/stable/customize.html#setup-cfg
#
# - Hint:
#
#  --strict-markers   markers not registered in the `markers` section
#                     of the configuration file raise errors.
#
#  --tb=style         traceback print mode (auto/long/short/line/native/no).
#
#  -r chars           show extra test summary info as specified by chars:
#                     (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed,
#                     (p)assed, (P)assed with output, (a)ll except passed
#                     (p/P), or (A)ll.  (w)arnings are enabled by default
#                     (see --disable-warnings),  'N' can be used to reset
#                     the list. (default: 'fE').

[tool.pytest.ini_options]
addopts = "--tb=short --strict-markers -ra"

# ***

# coverage options
# ================

# CXREF: https://coverage.readthedocs.io/en/latest/config.html

# Note that if .coveragerc exists, these settings are ignored.

[tool.coverage.report]

# Use 'precision' to adjust the HTML coverage value, e.g.,
#   precision = 3
# might show
#   94.737%
# Whereas (the default)
#   precision = 0
# would instead show
#   95%
precision = 0

# The 'exclude_lines' option might be useful if want to exclude
# the main entry point, which might not be easily testable.
#
# - E.g., if the main __init__.py contains the lines:
#
#       if __name__ == '__main__':
#           main()  # <-- This line is missed
#
#   You could exclude the block using the config:
#
#       exclude_lines = [ "if __name__ == .__main__.:", ]
#
#   Or possibly:
#
#       exclude_lines =
#           if __name__ == .__main__.:
#
# - For the easy-as-pypi reference project, we don't currently
#   test the Click group command:
#
#       @click.group()
#       def cli():
#           pass  # <-- This line is missed
#
#   Which we could skip (not count as missed) using the config:
#
#       exclude_lines = [ "def cli\\(\\):", ]
#
#   but really we should add coverage (because I don't think
#   it's that difficult, but at least missing it has provided
#   a good example of how 'exclude_lines' values are regex).

[tool.coverage.run]

# Tabulate branch coverage, too.
branch = true

# Specifying 'source' is unnecessary, e.g.,
#   source = [ "src/", "tests/", ]
# is the same as either:
#   coverage run -m pytest tests/
#   # Or:
#   coverage run -m pytest tests/ src/
# However if you wanted to omit tests/ coverage, you could do this:
#   source = [ "src/", ]

# CXREF: Enable experimental relative_files, for coverage-comment workflow.
# https://github.com/py-cov-action/python-coverage-comment-action#basic-usage
# https://coverage.readthedocs.io/en/6.2/config.html#config-run-relative-files
relative_files = true

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# black options
# =============
#
# CXREF:
#   https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file

[tool.black]

# black recommends 88 llen.
# CXREF: https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length
# USYNC: (max) line length shared among: black, flake8, isort, doc8, yamllint.
line-length = 88

# Default: Sussed from pyproject.toml
#  target-version = ['py38']

# Default: Only .py or .pyi files:
#  include = '\.pyi?$'

# 'extend-exclude' excludes files or directories in addition to the defaults
#
#  extend-exclude = '''
#  # A regex preceded with ^/ will apply only to files and directories
#  # in the root of the project.
#  (
#    ^/foo.py    # exclude a file named foo.py in the root of the project
#    | .*_pb2.py  # exclude autogenerated Protocol Buffer files anywhere in the project
#  )
#  '''

# ***

# flake8 options
# ==============
#
# CXREF: https://flake8.pycqa.org/en/latest/user/options.html
#
# - Flake8 itself does not support pyproject.toml (still uses ./.flake8)
#   but some plugins do.
#
#   - TRACK/2023-05-18: *pyproject.toml (PEP 518) support*
#       https://github.com/PyCQA/flake8/issues/234
#
# - The top 2 results to 'flake8 pyproject.toml':
#     https://github.com/john-hen/Flake8-pyproject
#     https://gitlab.com/durko/flake8-pyprojecttoml
#
#   I tried the first one, and it works.

# CXREF: https://github.com/DmytroLitvinov/awesome-flake8-extensions

[tool.flake8]

# Add a space after the path to make the output path easier to double-click-copy.
# - CXREF: See comments in Makefile:
#   - The `make lint` task expects this format so it
#     can prepare a Vim Quickfix file.
format = "%(path)s %(row)d:%(col)d: %(code)s %(text)s"

# So that the user can call `flake8`, maintain an exclude list. (Another way
# to lint is via `make lint` or `tox -e flake8`, which call flake8 on exact
# paths, e.g., `flake8 setup.py source/ tests/`. Here we achieve same effect
# but by doing the opposite, being exclusive rather than inclusive.)
# - Tl;dr This allows user to run simply `flake8`.
# - Use 'extend_exclude' vs. 'exclude' so we don't override --exclude from
#   command line.
extend_exclude = [
    # The build directory, if not ignored, has 50 or so lintable files.
    "build/",
    # Not ignoring .tox adds tens of Ks files.
    ".tox/",
    # These directories don't contain any lintable files for flake8 to
    # find, but ignore them anyway to save whatever time globbing takes.
    "dist/",
    ".git/",
    "htmlcov/",
    ".pytest_cache/",
    "__pycache__",
    ".venv*/",
]

per_file_ignores = [
    # Ignore "E265 block comment should start with '# '" because
    # `sphinx-quickstart` generates disabled options like "#this"
    # rather than "# this" or "#  this". And we want to keep the
    # file diffable against `sphinx-quickstart`, so rather than
    # make the file lint, tell flake8 to skip just that check.
    "docs/conf.py:E265",
    {% block flake8_per_file_ignores -%}
    # E.g.,
    # # noqa: F401: imported but unused
    # "src/acme/__init__.py:F401",
    {%- endblock %}
]

# USYNC: (max) line length shared among: black, flake8, isort, doc8, yamllint.
max_line_length = 88

# See list of error codes (we can list here to ignore):
#
#   https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
#
# - Project-agnostic, universal behavior (that supports and enforces this
#   and similar projects' style guides, i.e., this developer's preferences):
#
#   - ✓ W391: blank line at end of file
#
#       - (lb): Personal preference. So that, e.g., Vim's <C-End> is predictable
#               and goes to first column of an empty last line, rather than to
#               some unknown last column of a nonempty last line.
#
#   - ✓ W503: line break before binary operator
#
#       - (lb): I'm with Knuth, for readability, because columns align.
#
#               Prefer this:
#
#                   if (some_thing
#                       and another
#                       and another_thing):
#
#               over this:
#
#                   if (some_thing and
#                       another and
#                       another_thing):
#
# - Project- and dependency-specific, less common options:
#
#   - ✗ W605 invalid escape sequence:
#
#       - Specific to some Click library usage.
#         - (lb): Was warned on regex, e.g., '\d{2}' was flagged.
#         - (lb): Was warned on escape in Click help string, e.g., 'blah \# blah'.
#
#   - ✗ E711 comparison to None should be 'if cond is None:'
#
#       - Specific to SQLAlchemy library.
#         - (lb): SQLAlchemy filter function honors `== None`, not `is None`, e.g.,
#                   query = query.filter(AlchemyFact.activity == None)
#
extend_ignore = [
    # blank line at end of file
    "W391",
    # line break before binary operator
    "W503",

    # *** For black.

    # whitespace before ‘,’, ‘;’, or ‘:’
    "E203",

    # line too long (82 > 79 characters)
    #  "E501",

    # Line too long
    # https://github.com/PyCQA/flake8-bugbear#opinionated-warnings
    #  "B950".
]

# CXREF: https://docs.python.org/3/library/gettext.html#gettext.install
#   gettext.install "installs the function _() in Python’s builtins namespace..."
# which means we *need* to omit the typical import:
#   from gettext import gettext as _
# (otherwise breaks localization (unlocalized strings are used)).
# - We also need to tell flake8 to avoid: F821 undefined name '_'
builtins = [
    "_",
]

# ***

# isort options
# =============

# CXREF: https://pycqa.github.io/isort/docs/configuration/options.html

[tool.isort]

include_trailing_comma = true

# USYNC: (max) line length shared among: black, flake8, isort, doc8, yamllint.
line_length = 88

# multi_line_output: 3 - Vertical Hanging Indent.
multi_line_output = 3

known_third_party = [
    # USYNC: Keep synced with [tool.poetry(.*)?.dependencies], below.
    #
    # *** External packages
    #
    # USAGE: List symbol names from application depenendencies here,
    #        so the corresponding imports are grouped accordingly.
    {% block isort_known_third_party -%}
    # E.g.,
    #  "acme",
    {%- endblock %}
    #
    # *** Testing packages
    "factory",
    "faker",
    "fauxfactory",
    "freezegun",
    "pytest",
    "pytest_factoryboy",
]

# ***

# doc8 options
# ============

[tool.doc8]

ignore-path = [
    ".tox/",
    # From `sphinx-apidoc` called by `make docs` from Makefile.
    "docs/_build/",
    # For Makefile targets that create virtualenvs, e.g.,
    # `make develop`, `make doc8`, `make docs`, etc.
    ".venv*/",
]

# USYNC: (max) line length shared among: black, flake8, isort, doc8, yamllint.
max-line-length = 88

# Here's an old note: "Specify encoding lest doc8 think it's 'Windows-1254'
#                      and raise UnicodeDecodeError."
file-encoding = "utf-8"

# If you need to ignore specific errors in a specific file:
#  ignore-path-errors=/tmp/other_thing.rst;D001;D002
# DEVs: Uncomment verbose for TMI.
#  verbose = 1

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# Not using the special `dev` group:
#
#   [tool.poetry.group.dev.dependencies]
#
# but instead use multiple custom groups
# to serve essentially the same purpose,
# e.g., a developer might run:
#
#   poetry install --with dist,i18n,lint,test,docstyle,docs,extras

# ***

# **** Packages for preparing builds and releases.

[tool.poetry.group.dist]
optional = true

[tool.poetry.group.dist.dependencies]

# - "... enable dynamic versioning based on tags in your version control
#    system, powered by Dunamai"
#
#   https://pypi.org/project/poetry-dynamic-versioning
#   https://github.com/mtkennerly/poetry-dynamic-versioning
#   https://github.com/mtkennerly/dunamai
poetry-dynamic-versioning = ">=0.21.5"

# - "Collection of utilities for publishing packages on PyPI"
#
#   https://pypi.org/project/twine
#   https://twine.readthedocs.io/en/latest/
#
# - We use Poetry to publish to PyPI, but we also run `twine check`
#   to validate the sdist and bdist (especially useful is verifying
#   that your README.(md|rst) is valid for PyPI).
# - TRACK/2023-05-18: Perhaps Poetry will bake this someday:
#   - *check dist like twine check*
#       https://github.com/python-poetry/poetry/issues/2517
#   - Suggests exactly what our Makefile and tox.ini does:
#       poetry build && twine check dist/*
twine = ">=4.0.2"

# ***

# **** Packages for i18n.

# This group is build-related, so could be a part of 'group.dist',
# but keeping separate so `tox -e twine_check` excludes it.

[tool.poetry.group.i18n]
optional = true

[tool.poetry.group.i18n.dependencies]

# - "A collection of tools for internationalizing Python applications."
#
#   https://babel.pocoo.org/en/latest/
#   https://pypi.org/project/babel
babel = "^2.12.1"

# ***

# **** Packages for linting.

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]

# - "The Uncompromising Code Formatter"
#
#   https://pypi.org/project/black
#   https://github.com/psf/black
black = ">=23.3.0"

# - "the modular source code checker: pep8, pyflakes and co"
#
#   https://pypi.org/project/flake8
#   https://gitlab.com/pycqa/flake8
flake8 = ">=6.0.0"

# - "Flake8 plug-in loading the configuration from pyproject.toml"
#
#   https://pypi.org/project/Flake8-pyproject/
#   https://github.com/john-hen/Flake8-pyproject
Flake8-pyproject = ">=1.2.3"

# - "utility / library to sort Python imports"
#
#   https://pypi.org/project/isort
#   https://github.com/timothycrosley/isort
isort = ">=5.12.0"

#   https://pypi.org/project/yamllint/
#   https://github.com/adrienverge/yamllint
#   https://yamllint.readthedocs.io/en/stable/
#   https://www.yamllint.com/
yamllint = ">=1.32.0"

# ***

# **** Packages for testing, either locally or via CI.

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]

# ***** pytest Framework & Related

# - "pytest: simple powerful testing with Python"
#
#   https://pypi.org/project/pytest
#   https://docs.pytest.org/en/latest/
pytest = ">=7.3.1"

# - "Thin-wrapper around the mock package for easier use with pytest"
#
#   https://pypi.org/project/pytest-mock
#   https://github.com/pytest-dev/pytest-mock/
pytest-mock = ">=3.10.0"

# - "generic virtualenv management and test command line tool"
#
#   https://pypi.org/project/tox
#   https://tox.readthedocs.io/en/latest/
tox = ">=4.5.1"

# DUNNO/2022-09-30: I thought we might need a pyenv plugin (tox-pyenv)
# but `tox` is working great. Perhaps because I ran `pyenv install`
# on all the Python versions previously (separate from this project
# setup).
# - SAVVY: If tox fails on you, perhaps ensure pyenv versions installed.

# ***** Coverage

# - "Code coverage measurement for Python"
#
#   https://pypi.org/project/coverage
#   https://coverage.readthedocs.io/en/latest/
coverage = ">=7.2.5"

# - "Pytest plugin for measuring coverage"
#
#   https://pypi.org/project/pytest-cov
#   https://github.com/pytest-dev/pytest-cov
pytest-cov = ">=4.0.0"

# - Upload to codecov.io.
#
#   https://pypi.org/project/codecov
#   https://github.com/codecov/codecov-python
codecov = ">=2.1.13"

# *** Datetime testing.

# - "travel through time by mocking the datetime module"
#
#   https://github.com/spulec/freezegun
#  freezegun = ">=0.3.14"

# ***** Fakers and Factories.

{% block deps_test_fakers_and_factories -%}
# - "package that generates fake data for you"
#
#   https://pypi.org/project/Faker
#   https://github.com/joke2k/faker
Faker = ">=18.7.0"
#
# - "Faker integration with the pytest framework."
#
#   https://pypi.org/project/pytest-faker
#   https://github.com/pytest-dev/pytest-faker
#  pytest-faker >= 2.0.0

# - "Generates random data for your tests"
#
#   https://pypi.org/project/fauxfactory
#   https://github.com/omaciel/fauxfactory
fauxfactory = ">=3.1.0"

# - ORM record generator / "test fixtures replacement for Python".
#
#   https://pypi.org/project/factory-boy
#   https://github.com/FactoryBoy/factory_boy
#  factory-boy = ">=3.2.1"
#
# - "Factory Boy support for pytest"
#
#   https://pypi.org/project/pytest-factoryboy
#   https://github.com/pytest-dev/pytest-factoryboy
#  pytest-factoryboy = ">=2.5.1"

{% endblock -%}

# ***

# **** Packages for linting the documentation.

[tool.poetry.group.docstyle]
optional = true

[tool.poetry.group.docstyle.dependencies]

# - "Style checker for Sphinx (or other) RST documentation"
#
#   https://pypi.org/project/doc8
#   https://launchpad.net/doc8
#
# HSTRY: See also ./.pyproject-editable/pyproject.toml (`make doc8`),
# an old kludge that kept doc8 out of this file because dep conflict:
# - sphinx-rtd-theme 1 (1.2.0, 1.3.0) requires docutils <0.19.
# - doc8 1 (1.1.1) requires more recent docutils >=0.19, <0.21.
# - But now sphinx-rtd-theme (2.0.0rc*) supports latest docutils.
{% block docstyle_deps_doc8 -%}
doc8 = ">=1.1.1"
{%- endblock %}

# ***

# - Python docstring checker.
#
#   https://pypi.org/project/pydocstyle
#   https://github.com/PyCQA/pydocstyle/
pydocstyle = ">=6.3.0"

# - "A lil' TOML parser"
#
#   https://pypi.org/project/tomli
#   https://github.com/uiri/toml
#
# - We include `tomli` so `pydocstyle` can validate `pyproject.toml` (this file).
#   - And avoids warning on `pydocstyle`:
#       WARNING: The /path/to/package/pyproject.toml configuration file was
#                ignored, because the `tomli` package is not installed.
tomli = ">=2.0.1"

# ***

# **** Packages for building the documentation.

[tool.poetry.group.docs]
optional = true

# Specify packages required to build the documentation.
[tool.poetry.group.docs.dependencies]
# - "Python documentation generator"
#
#   https://pypi.org/project/Sphinx
#   https://www.sphinx-doc.org/en/master/
#
# 2023-11-06: Until Python 3.8 EOL 2024-10, we use a version matrix,
#             because Sphinx 7 requires Python >=3.9.
sphinx = [
    {version = "^6.2.1", python = "~3.8"},
    {version = "^7.2.6", python = "^3.9"},
]

# - "Read the Docs theme for Sphinx"
#
#   https://pypi.org/project/sphinx-rtd-theme
#   https://github.com/readthedocs/sphinx_rtd_theme
#
# BWARE/2023-11-06: Running alpha so we can include doc8 (and avoid
# dep conflict on docutils). But if you have issues, revert to 1.3.0
# and disable doc8 dep (or just drop this commit).
#  sphinx-rtd-theme = "^1.3.0"
# - LATER: Update to Normal version once released,
#          and remove comments from this commit.
sphinx-rtd-theme = "^2.0.0rc4"

# - "Python API and shell utilities to monitor file system events."
#
#   https://pypi.org/project/watchdog
#   https://github.com/gorakhargosh/watchdog
watchdog = ">=3.0.0"

# ***

# **** Additional packages, such as those developer may want to run from CLI.

[tool.poetry.group.extras]
optional = true

[tool.poetry.group.extras.dependencies]
# - "Render local readme files before sending off to GitHub"
#   - For previewing docs/history-ci.md.
#
#   https://pypi.org/project/grip
#   https://github.com/joeyespo/grip
grip = ">=4.6.1"

# - "CLI for Jinja2"
#   - For running render-faithful-file more quickly
#     (lib/update-faithful.sh can skip the temp venv).
#
#   https://pypi.org/project/jinja2-cli
#   https://github.com/mattrobenolt/jinja2-cli
jinja2-cli = ">=0.8.2"

# - "pdbr is intended to make the PDB results more colorful.
#    it uses Rich library to carry out that."
#   Aka: *Colorful PDB experience using Rich*.
#
#   https://pypi.org/project/pdbr
pdbr = ">=0.8.5"

# - "A viewer for ReStructuredText documents that renders them on the fly."
#   - For previewing README.rst.
#
#   https://pypi.org/project/restview
#   https://mg.pov.lt/restview/
restview = ">=3.0.1"

# - "the blessed package to manage your versions by scm tags"
#   - A remnant of pre-Poetry setuptools-based packaging,
#     but still useful: Enables 'editable' installs to report
#     their --version from Git tags.
#     - Used by: https://github.com/tallybark/easy-as-pypi-getver#🔢
#
#   https://pypi.org/project/setuptools-scm/
#   https://github.com/pypa/setuptools_scm/
setuptools_scm = ">=8.0.4"

# - "Command-line YAML, XML, TOML processor -
#    jq wrapper for YAML/XML/TOML documents"
#   - For running bin/update-faithful more quickly
#     (it can skip the temp venv).
#
#   https://pypi.org/project/yq
#   https://github.com/kislyuk/yq
yq = ">=3.2.3"

# ***

# **** Known project-specific dep groups wired to some CI tasks

[tool.poetry.group.project_dist]
optional = true

[tool.poetry.group.project_dist.dependencies]
{% block project_dist_dependencies -%}
{%- endblock %}
[tool.poetry.group.project_i18n]
optional = true

[tool.poetry.group.project_i18n.dependencies]
{% block project_i18n_dependencies -%}
{%- endblock %}
[tool.poetry.group.project_lint]
optional = true

[tool.poetry.group.project_lint.dependencies]
{% block project_lint_dependencies -%}
{%- endblock %}
[tool.poetry.group.project_test]
optional = true

[tool.poetry.group.project_test.dependencies]
{% block project_test_dependencies -%}
{%- endblock %}
[tool.poetry.group.project_docstyle]
optional = true

[tool.poetry.group.project_docstyle.dependencies]
{% block project_docstyle_dependencies -%}
{%- endblock %}
[tool.poetry.group.project_docs]
optional = true

[tool.poetry.group.project_docs.dependencies]
{% block project_docs_dependencies -%}
{%- endblock %}
[tool.poetry.group.project_extras]
optional = true

[tool.poetry.group.project_extras.dependencies]
{% block project_extras_dependencies -%}
{%- endblock %}{% block project_custom_dependencies -%}
{%- endblock %}
# ***

# **** What RTD installs when it builds docs

[tool.poetry.extras]
# USYNC: These match [tool.poetry.dependencies] optional deps.
readthedocs = [ "tomli", "sphinx", "sphinx-rtd-theme" ]

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# **** Finally, the app dependencies.

[tool.poetry.dependencies]

# *** Python dep

# Python versions supported (required).
# - flake8 requires Python >=3.8.1.
# - sphinx 7 requires Python >=3.9, but we
#   work around that with a version matrix.
python = "^3.8.1"

# *** RTD (opt-in) deps

# - USYNC: These match [tool.poetry.extras] 'readthedocs' deps list.

tomli = { version = ">=2.0.1", optional = true }

# This is the same table the other sphinx dependency above uses, in group.docs:
# - Sphinx 7 requires >=3.9, but Python 3.8 not EOL until 2024-10.
sphinx = [
    { version = "^6.2.1", python = "~3.8", optional = true },
    { version = "^7.2.6", python = "^3.9", optional = true },
]

sphinx-rtd-theme = { version = "^2.0.0rc4", optional = true }

# *** App deps

{% block project_dependencies -%}

# E.g.,
acme = "^1.2.3"

{% endblock %}
