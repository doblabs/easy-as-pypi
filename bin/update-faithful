#!/usr/bin/env bash
# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=sh
# Project: https://github.com/doblabs/easy-as-pypi#ðŸ¥§
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

source_deps () {
  # Ensure coreutils installed (from Linux pkg. mgr., or from macOS Homebrew).
  insist_cmd 'realpath'

  # CXREF: ~/.kit/git/git-update-faithful/lib/update-faithful.sh
  #   https://github.com/thegittinsgood/git-update-faithful#â›²
  . "$(dirname "$(realpath "$0")")/../deps/git-update-faithful/lib/update-faithful.sh"

  # CXREF: ~/.kit/py/easy-as-pypi/.github/bin/update-poetry
  # - For: print_upstream_remote_url
  . "$(dirname "$(realpath "$0")")/../.github/bin/update-poetry"
}

insist_cmd () {
  local cmdname="$1"

  command -v "${cmdname}" > /dev/null && return 0

  >&2 echo "ERROR: Missing system command â€˜${cmdname}â€™."

  exit 1
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Note the causality dilemma (chicken-and-egg) here: We read from
# pyproject.toml to generate pyproject.toml...
# - You can either add/update [tool.easy_as_pypi] before the render,
#   or you can render twice (assuming the correct [tool.easy_as_pypi]
#   exists in .pyproject.project.tmpl, in which case the first render
#   populates the correct [tool.easy_as_pypi], and then the second
#   render uses it).

print_tmpl_src_data () {
  local canon_base_absolute="$1"

  venv_install_yq

  local project_name=""
  local project_url=""
  local project_author=""
  local project_license=""
  local copy_years_owner=""
  local coc_contact_email=""

  local trim_null="select( . != null )"

  project_name="$(
    tomlq -r ".tool.poetry.name | ${trim_null}" pyproject.toml
  )"

  # Basically `project_url="$(tomlq -r .tool.poetry.homepage pyproject.toml)"`
  # but checks *all* the URLs. Or on GHA ($CI = true), just uses 'origin' url.
  project_url="$(print_upstream_remote_url)" || exit 1

  # SAVVY: While pypoetry/Yaml lets you use dashes in table names,
  # e.g., [tool.easy_as_pypi], jq has issues, such as:
  #
  #   jq: error: syntax error, unexpected as (Unix shell quoting issues?)
  #     at <top-level>, line 1:
  #   .tool.easy_as_pypi.author
  #   jq: 1 compile error
  #
  # So we'll just use snake_case for the table name.

  project_author="$(
    tomlq -r ".tool.easy_as_pypi.author | ${trim_null}" pyproject.toml
  )"

  project_license="$(
    tomlq -r ".tool.poetry.license | ${trim_null}" pyproject.toml
  )"

  copy_years_owner="$(
    tomlq -r ".tool.easy_as_pypi.copy_years_owner | ${trim_null}" pyproject.toml
  )"

  coc_contact_email="$(
    tomlq -r ".tool.easy_as_pypi.coc_contact_email | ${trim_null}" pyproject.toml
  )"

  # Fallback canon pyproject.toml for (some) missing values.
  if [ $? -ne 0 ]; then
    # MAYBE/2023-11-10: If ${CI:-false}, fetch from org var, e.g., ${{ vars.COC_CONTACT }}.
    coc_contact_email="$(
      cd "${canon_base_absolute}"

      tomlq -r .tool.easy_as_pypi.coc_contact_email pyproject.toml
    )"
  fi

  local eapp_version
  eapp_version="$(
    cd "${canon_base_absolute}"

    git bump current 2> /dev/null \
      || git latest-version 2> /dev/null
  )"

  echo "\
{
    \"project\": {
        \"name\": \"${project_name}\",
        \"url\": \"${project_url}\",
        \"author\": \"${project_author}\",
        \"license\": \"${project_license}\",
        \"copy_years_owner\": \"${copy_years_owner}\",
        \"coc_contact_email\": \"${coc_contact_email}\"
    },
    \"easy_as_pypi\": {
        \"version\": \"${eapp_version}\"
    }
}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# SAVVY: How you might test a subset of this file operation:
#
#   UPDEPS_CANON_BASE_ABSOLUTE="${canon_base_absolute}"
#   render-faithful-file "docs/index.rst"
#   update-faithful-file ".github/dependabot.yml"
#   >&2 echo "STOP!"
#   exit 1

update_deps_easy_as_pypi () {
  # The *-faithful-* workflow expects that this executable lives at
  #   /path/to/easy-as-pypi/bin/update-deps
  # such that the canon path (aka path to this project) is 1 directory up.
  local canon_base_absolute="$(realpath "$(dirname "$0")/..")"

  # If we didn't use the render-faithful-file feature, we could skip the
  # venv. (We could also skip the update-faithful-begin altogether, which
  # really only exists so that venv create and activate, which takes a few
  # seconds, happens sooner rather than later, for better UX messaging.)
  local skip_venv_manage=false

  local sourcerer="https://github.com/doblabs/easy-as-pypi/blob/release/bin/update-faithful"

  local commit_subject=""

  # *** 1st update-faithful session

  # Sets UPDEPS_CANON_BASE_ABSOLUTE environ so it's available to each
  # update-faithful-file and render-faithful-file. Also creates and
  # activates the venv for render-faithful-file, and manages a UX
  # progress message, in the spirit of other OMR messaging (like
  # the `infuse` method).
  update-faithful-begin "${canon_base_absolute}" "${skip_venv_manage}"

  # *** Generate the source data JSON file (requires active venv)

  local tmpl_src_data="$(mktemp -t ${UPDEPS_VENV_PREFIX}XXXX)"
  local tmpl_src_format="json"

  print_tmpl_src_data "${canon_base_absolute}" > "${tmpl_src_data}"

  UPDEPS_TMPL_SRC_DATA="${tmpl_src_data}"
  UPDEPS_TMPL_SRC_FORMAT="${tmpl_src_format}"

  # *** 1st update-faithful session (continued)

  if [ -f ".pyproject.project.tmpl" ]; then
    update_faithful_files_only_pyproject_toml

    skip_venv_manage=true

    commit_subject="Build: CI: Generate pyproject.toml"

    update-faithful-finish "${sourcerer}" "${skip_venv_manage}" "${commit_subject}"

    # *** 2nd update-faithful session

    update-faithful-begin "${canon_base_absolute}" "${skip_venv_manage}" \
      "${tmpl_src_data}" "${tmpl_src_format}"
  fi

  update_faithful_files_excluding_pyproject_toml

  skip_venv_manage=false

  # The commit title defaults: "Deps: Update faithfuls <proj>".
  commit_subject=""

  update-faithful-finish "${sourcerer}" "${skip_venv_manage}" "${commit_subject}"

  # *** Completed undate-faithsul session

  command rm "${tmpl_src_data}"
}

# Render saves scoped copies of ".pyproject.tmpl" and
# ".pyproject.project.tmpl" to a temp. directory, generates
# source data (using pyproject.toml's [tool.easy_as_pypi] table)
# and creates "pyproject.toml".
update_faithful_files_only_pyproject_toml () {
  if [ -f ".pyproject.project.tmpl" ]; then
    render-faithful-file "pyproject.toml" ".pyproject.project.tmpl"
  fi
}

update_faithful_files_excluding_pyproject_toml () {

  # *** Top-level ./ files

  # Note the comment leaders below:
  # - BUILD: Means the file is generate by some build process.
  #   - This are listed so that you can compare directory listing
  #     to the list below, to ensure nothing missing.
  # - IGNOR: Files unique to the EAPP canon project.
  # - BELOW: Directory placeholder; look further down in this fcn for files.
  # - INFUS: Private, uncommitted files dev manages via OMR `infuse`.
  #   - Well, not really uncommitted, but committed to private dev repo,
  #     then "infused" into this project using symbolic and hard links.
  # - SPLIT: Files that vary slightly between this project and spin-offs.
  #   - In some cases, you could templatize these (using render-faithful-file).

  # SPLIT: update-faithful-file "AUTHORS.rst"
  # IGNOR: "bin/"
  update-faithful-file "codecov.yml"
  render-faithful-file "CODE-OF-CONDUCT.rst"
  render-faithful-file "CONTRIBUTING.rst"
  # â””â†’ Uses: "CONTRIBUTING.tmpl"
  # BUILD: ".coverage"
  # BUILD: "dist"
  # BELOW: "docs/"
  update-faithful-file ".editorconfig"
  # IGNOR: ".git"
  # BELOW: ".github/"
  update-faithful-file ".gitignore"
  # INFUS: ".gitignore.local"
  # â””â†’ Symlinked by link_private_exclude, from user's infuser:
  #      ~/.kit/py/.mrinfuse/easy-as-pypi/_git/info/exclude
  # SPLIT: "HISTORY.rst"
  # BUILD: "htmlcov/"
  # INFUS: ".ignore"
  # â””â†’ Symlinked by link_private_ignore, from user's infuser:
  #      ~/.kit/py/.mrinfuse/easy-as-pypi/.ignore-for-the-masses
  update-faithful-file ".ignore.example"
  # SPLIT: "LICENSE"
  # â””â†’ Well, not always split, but unlikely to ever change, and
  #    don't want to presume that derived project uses the same.
  update-faithful-file "Makefile"
  # INFUS: "Makefile.local"
  # IGNOR: "Makefile.local.example"
  # â””â†’ We don't ship the Makefile example. In the unlikely event a dev
  #    actually wants it, they can copy it from this reference project.
  update-faithful-file "Maketasks.sh"
  # BUILD: "poetry.lock"
  # BELOW: ".pyproject-doc8/"
  # BUILD: ".pyproject-editable/"
  # SPLIT: ".pyproject.project.tmpl"
  # CANON: ".pyproject.tmpl"
  # SPLIT: "pyproject.toml"
  # â””â†’ Or generated: See above: update_faithful_files_only_pyproject_toml
  # BUILD: ".pytest_cache/"
  # SPLIT: "README.rst"
  update-faithful-file ".readthedocs.yml"
  # SPLIT: "src/"
  # SPLIT: "tests/"
  # BUILD: ".tox/"
  update-faithful-file "tox.ini"
  # BUILD: ".venv-doc8/"
  # BUILD: ".venv-docs/"
  # BUILD: ".venv-easy-as-pypi/"
  update-faithful-file ".yamllint"

  # *** docs/ files

  # KLUGE/2023-11-11: Until I think of a better way to do this...
  # maybe explicitly using an environ to opt-out docs, but we'll
  # see if this automated check isn't *too* spicy. It looks for
  # *our* docs/.ignore file and only updates docs/ if it is.

  if head -3 "docs/.ignore" 2> /dev/null \
    | tail -1 \
    | grep -q -e "^# Pattern: https://github.com/doblabs/easy-as-pypi#ðŸ¥§$" \
  ; then
    update-faithful-file "docs/authors.rst"
    update-faithful-file "docs/code-of-conduct.rst"
    update-faithful-file "docs/conf.py"
    update-faithful-file "docs/contributing.rst"
    # SPLIT: "docs/<package_name>"*".rst"
    # SPLIT: "docs/history-ci.md"
    update-faithful-file "docs/history.rst"
    update-faithful-file "docs/.ignore"
    render-faithful-file "docs/index.rst"
    render-faithful-file "docs/installation.rst"
    # SPLIT: "docs/license.rst"
    render-faithful-file "docs/make.bat"
    update-faithful-file "docs/Makefile"
    render-faithful-file "docs/modules.rst"
    update-faithful-file "docs/readme.rst"
  fi

  # *** .github/ files

  update-faithful-file ".github/dependabot.yml"
  update-faithful-file ".github/doblabs-dependencies.yml"
  # IGNOR: ".github/README--github-variable-dump--example.rst"
  #
  update-faithful-file ".github/bin/update-poetry"
  #
  update-faithful-file ".github/deps/git-update-faithful/lib/update-faithful.sh" \
    "deps/git-update-faithful/lib/update-faithful.sh"
  update-faithful-file ".github/deps/sh-logger/bin/logger.sh" \
    "deps/sh-logger/bin/logger.sh"
  update-faithful-file ".github/deps/sh-logger/deps/sh-colors/bin/colors.sh" \
    "deps/sh-logger/deps/sh-colors/bin/colors.sh"
  #
  # IGNOR: ".github/disabled/coverity.yml"
  #
  update-faithful-file ".github/workflows/checks-unspecial.yml"
  update-faithful-file ".github/workflows/checks-versioned.yml"
  update-faithful-file ".github/workflows/checks.yml"
  update-faithful-file ".github/workflows/ci-tags-wrangle.yml"
  update-faithful-file ".github/workflows/codeql-analysis.yml"
  update-faithful-file ".github/workflows/coverage-comment-external.yml"
  update-faithful-file ".github/workflows/coverage-comment.yml"
  update-faithful-file ".github/workflows/readthedocs-preview.yml"
  update-faithful-file ".github/workflows/release-github.yml"
  update-faithful-file ".github/workflows/release-pypi.yml"
  update-faithful-file ".github/workflows/release-smoke-test.yml"
  update-faithful-file ".github/workflows/update-cascade.yml"
  update-faithful-file ".github/workflows/update-deps.yml"
  update-faithful-file ".github/workflows/update-merged.yml"

  # *** .pyproject-doc8/ files

  update-faithful-file ".pyproject-doc8/README.md"
  update-faithful-file ".pyproject-doc8/poetry.lock"
  update-faithful-file ".pyproject-doc8/pyproject.toml"
  update-faithful-file ".pyproject-doc8/src/__init__.py"
  update-faithful-file ".pyproject-doc8/tests/__init__.py"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  source_deps

  update_deps_easy_as_pypi "$@"
}

# Run the command iff being executed.
if ! $(printf %s "$0" | grep -q -E '(^-?|\/)(ba|da|fi|z)?sh$' -); then
  main "$@"
fi

unset -f main
unset -f source_deps
unset -f insist_cmd

