#!/usr/bin/env python
# vim:tw=0:ts=4:sw=4:et:norl:ft=python:nospell
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/<varies>
# Pattern: https://github.com/doblabs/easy-as-pypi#🥧
# License: MIT

"""Sphinx docs builder."""

# Boilerplate documentation build configuration file,
# (Originally) created by sphinx-quickstart on Tue Jul 9 22:26:36 2013
# (and since somewhat modified to a make more palatable boilerplate).
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import sys
from collections.abc import MutableMapping
from importlib.metadata import version as importlib_metadata_version

# import sphinx_rtd_theme

# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
# sys.path.insert(0, os.path.abspath('.'))

# Get the project root dir (parent dir of docs/).
cwd = os.getcwd()
project_root = os.path.dirname(cwd)

# Insert the project root dir as the first element in the PYTHONPATH.
# This lets us ensure that the source package is imported, and that its
# version is used.
sys.path.insert(0, project_root)


def get_meta() -> MutableMapping:
    """Get project metadata from pyproject.toml file.

    Returns:
        MutableMapping
    """
    import tomli

    # toml_path = os.path.join(os.path.dirname(__file__), "..", "pyproject.toml")
    toml_path = os.path.join(project_root, "pyproject.toml")

    with open(toml_path, "rb") as fopen:
        pyproject = tomli.load(fopen)

    return pyproject


meta = get_meta()
# E.g., meta = {'tool': {'poetry': {
#   'name': 'easy-as-pypi',
#   'version': '1.0.0',
#   'description': 'Bootstrapping your next Python CLI made easy as PyPI',
#   'authors': ['Landon Bouma <doblabs@tallybark.com>'],
#   'maintainers': ['Tally Bark LLC <doblabs@tallybark.com>'],
#   'license': 'MIT',
#   'readme': 'README.rst',
#   'homepage': 'https://github.com/doblabs/easy-as-pypi',
#   'repository': 'https://github.com/doblabs/easy-as-pypi',
#   'documentation': 'https://easy-as-pypi.readthedocs.io/en/latest',
#   ...

# Determine the distributable package name.
# - You could always set this explicitly, e.g.,
#
#     project_dist = 'pip-install-name'
#
#   but it's general probable, just be aware:
#
#   - On a dev machine, you might use the path:
#       /home/user/.kit/py/easy-as-pypi/docs
#     In which case the project name in encoded in the parent directory name.
#   - Same with GitHub Actions, the parent name works:
#       /home/runner/work/easy-as-pypi/easy-as-pypi/docs
#   - But on RTD, the package name is further up the ancestry:
#       /home/docs/checkouts/readthedocs.org/user_builds/easy-as-pypi/checkouts/latest/docs
#     - Fortunately RTD declares an environ we can use.
#
#  try:
#      project_dist = os.environ['READTHEDOCS_PROJECT']
#  except KeyError:
#      project_dist = os.path.basename(project_root)
#
# Though if we use pyproject.toml metadata, we don't need the RTD environ.
project_dist = meta["tool"]["poetry"]["name"]

# Usually the installable package name is the same name as the
# kebab-case directory name converted to snake_case.
# - If that's not the case for you, change this, e.g.,
#
#     package_name = 'python_import_name'
package_name = project_dist.replace("-", "_")

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃                                                                     ┃
# ┃ YOU/DEV: Customize this import and these strings for your project.  ┃

# Pull the GH org from the repository URL.
# E.g., project_ghuser = 'doblabs'
repository_url = ""
try:
    repository_url = meta["tool"]["poetry"]["repository"]
except KeyError:
    try:
        repository_url = meta["tool"]["poetry"]["urls"]["repository"]
    except KeyError:
        try:
            repository_url = meta["tool"]["poetry"]["homepage"]
        except KeyError:
            try:
                repository_url = meta["tool"]["poetry"]["urls"]["homepage"]
            except KeyError:
                print(
                    "\nERROR: docs/conf.py cannot find pyproject.toml "
                    "'repository' or 'homepage' URL"
                )

                raise
project_ghuser = os.path.basename(os.path.dirname(repository_url))
project_ghrepo = project_dist

# E.g., project_auth = 'Landon Bouma <email>'
project_auth = ",".join(meta["tool"]["poetry"]["authors"])
# E.g., project_copy = '2020-2023, Landon Bouma <email>'
try:
    copy_years_owner = meta["tool"]["easy_as_pypi"]["copy_years_owner"]
    project_copy = f"{copy_years_owner.split(' ')[0]}, {project_auth}"
except KeyError:
    project_copy = project_auth

# project_orgn = 'Tally Bark LLC'
project_orgn = meta["tool"]["poetry"]["maintainers"]

# ***

# If you see "WARNING: duplicate label" messages, check if the
# sphinx.ext.autosectionlabel is enabled — then disable it.
# - As opposed to exclude files using exclude_patterns.
#
# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "_build",
    # Note that docs/readme.rst merely includes the top-level README.rst.
    # - E.g., docs/readme.rst contains a single directive:
    #     .. include:: ../README.rst
    # - If we don't exclude that file here, you'll see a toctree warning:
    #     checking consistency...
    #       /path/to/easy-as-pypi/docs/readme.rst:
    #         WARNING: document isn't included in any toctree
    # - Note that README.rst is still included probably (to be honest,
    #   I'm not really sure what's going on =).
    "readme.rst",
]

# ***

# You can ignore these values unless you plan to generate other formats.

# Used below by latex_documents, man_pages, and texinfo_documents,
# none of which we generate from Sphinx sources.
project_docinfo = "{} Documentation".format(project_dist)

# Option for HTMLHelp output, used by htmlhelp_basename below.
# - This value seems like it'd be used for HTML output:
#   - *Output file base name for HTML help builder. Default is 'pydoc'.*
#     https://certik.github.io/sphinx/config.html
#   But I don't see it used in the HTML docs under docs/_build, either
#   as data, or as a "file base name". So, to me, looks unused.
#   - See also: https://pypi.org/project/sphinxcontrib-htmlhelp/
# - This value is usually (or at least what I've seen in examples)
#   the PascalCase of the project (or package) name with "doc"
#   appended, e.g., for a project named "my-python-project", then:
#
#     project_htmlhelp_basename = 'MyPythonProjectdoc'
project_htmlhelp_basename = (
    "".join([word.capitalize() for word in project_dist.split("-")]) + "doc"
)

# Used by texinfo_documents, below, for Texinfo output.
#  project_texinfo = 'One line description of project.'
project_texinfo = meta["tool"]["poetry"]["description"]

# ┃                                                                     ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

# -- General configuration ---------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# Ref:
#   http://www.sphinx-doc.org/en/master/usage/extensions/index.html
extensions = [
    "sphinx.ext.autodoc",
    #
    # For hyperlinks, e.g., :ref:`My Section Title`.
    # ISOFF/2023-05-22: I don't see any diff with this option on or off,
    # when when autosectionlabel enabled, if the same reST header title
    # is used in two separate files, you'll see warnings, e.g.,:
    #   WARNING: duplicate label "title", other instance
    #     in /path/to/easy-as-pypi/docs/<file>.rst
    #
    #  'sphinx.ext.autosectionlabel',
    #
    "sphinx.ext.coverage",
    #
    # (lb): pedantic_timedelta includes intersphinx.
    #  'sphinx.ext.intersphinx',
    #
    # Google style docstrings
    # https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html
    # https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings
    # https://google.github.io/styleguide/pyguide.html#383-functions-and-methods
    "sphinx.ext.napoleon",
    #
    "sphinx.ext.todo",
    #
    "sphinx.ext.viewcode",
]

# CXREF: easy-as-pypi: See `sphinx_docs_inject` in Maketasks.sh.
# - I haven't tested, but you might be able to affect rst files
#   generated by `sphinx-apidoc` (before `sphinx_docs_inject` is
#   called) with the following options.
# - E.g., achieve something similar to Module Contents directive:
#  .. automodule:: easy_as_pypi_appdirs
#      :special-members: __new__
#      :noindex:
#      ...
# - Though I think I tested this years ago and was unsuccessful.
#   - What does work is using the injector.
# - CXREF:
#   https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#confval-autoclass_content
#
#  autoclass_content = 'both'
#
#  autodoc_default_options = {
#      'members': 'var1, var2',
#      'member-order': 'bysource',
#      'special-members': '__init__',
#      'undoc-members': True,
#      'exclude-members': '__weakref__'
#  }

# Prevent non local image warnings from showing.
suppress_warnings = ["image.nonlocal_uri"]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix of source filenames.
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = project_dist
copyright = project_copy
author = project_auth

# easy-as-pypi uses poetry-dynamic-versioning, so no need to maintain
# the version here; we can grab it from the package.
# - This approach originally inspired by setuptools_scm (pre-Poetry):
#   https://github.com/pypa/setuptools_scm#usage-from-sphinx
#
# The version info for the project you're documenting, acts as replacement
# for |version| and |release|, also used in various other places throughout
# the built documents.
#
# The full version, including alpha/beta/rc tags.
release = importlib_metadata_version(package_name)
# The short X.Y version.
# - (lb): One place I see `release` used — to name the browser page.
version = ".".join(release.split(".")[:2])
# version = meta["tool"]["poetry"]["version"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# language = None

# There are two options for replacing |today|: either, you set today to
# some non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
#
# ISOFF: easy-as-pypi: exclude_patterns definition moved above.
# - Disabling this rather than deleting entirely, to retain diffability
#   with reference conf.py (what `sphinx-quickstart` creates).
#
#  exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built
# documents.
# keep_warnings = False

# -- Options for HTML output -------------------------------------------

# Ref:
#   http://www.sphinx-doc.org/en/master/usage/configuration.html#html-options
#   http://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

# The theme to use for HTML and HTML Help pages.
# Ref:
#   https://sphinx-rtd-theme.readthedocs.io/en/latest/configuring.html
html_theme = "sphinx_rtd_theme"

# 2020-03-29: There's a deprecation warning fixed upstream last year
# but the Sphinx package has not been released to PyPI since Feb, 2019.
# Here's the error:
#   writing additional pages...  search/<path>/.tox/docs/lib/python3.8/site-packages/
#     sphinx_rtd_theme/search.html:21: RemovedInSphinx30Warning: To modify
#     script_files in the theme is deprecated. Please insert a <script> tag
#     directly in your theme instead.
html_theme_path = [
    "_themes",
]

# Theme options are theme-specific and customize the look and feel of a
# theme further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    # Table of contents options.
    "collapse_navigation": True,
    "sticky_navigation": True,
    "navigation_depth": 4,
    "includehidden": True,
    "titles_only": False,
    # Miscellaneous options.
    # 'canonical_url': '',
    # 'analytics_id': 'UA-XXXXXXX-1',  #  Provided by Google in your dashboard
    "logo_only": False,
    "display_version": True,
    # prev_next_buttons_location: [bottom], top, both, or None.
    "prev_next_buttons_location": "bottom",
    "style_external_links": False,
    # vcs_pageview_mode (upper-left navbar home button):
    #   With display_github: [blob], edit, or raw.
    #   #'vcs_pageview_mode': '',
    # style_nav_header_background: Default: '#2980B9'
    #   #'style_nav_header_background': '#2980B9',
}

# https://docs.readthedocs.io/en/latest/vcs.html?highlight=conf_py_path
html_context = {
    # Enable the "Edit on GitHub" link within the header of each page.
    "display_github": True,
    # Set the following variables to generate the resulting github URL for each page.
    # Format Template: https://{{ github_host|default("github.com") }}
    #   /{{ github_user }}/{{ github_repo }}/blob
    #   /{{ github_version }}{{ conf_py_path }}{{ pagename }}{{ suffix }}
    "github_user": project_ghuser,
    "github_repo": project_ghrepo,
    # This branch name controls the *Edit on GitHub* on RTD page headers.
    # USYNC: The main/default GH branch: 'release'.
    # - MAYBE: Replace hardcoded value with {{ template.value }},
    #          or maybe use `git rev-parse --abbrev-ref=loose HEAD`.
    #    import subprocess
    #    completed_proc = subprocess.run([
    #       'git', 'rev-parse', '--abbrev-ref=loose', 'HEAD'
    #    ], capture_output=True)
    #    completed_proc.stdout.decode().strip()
    "github_version": "release/",
    # Path in the checkout to the docs root.
    "conf_py_path": "docs/",
}

# File-wide metadata.
# (lb): I found this documented somewhere but it did not fix the
# "Edit on GitHub" broken link.
#   github_url = 'https://github.com/doblabs/easy-as-pypi'

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []
# (lb): I've seen this path in some projects, but I think it's only
# necessary if you install sphinx_rtd_theme manually (not via pip).
#   html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None

# A shorter title for the navigation bar.  Default is the same as
# html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the
# top of the sidebar.
# html_logo = None
# The logo could be placed in the navigation area, but it's distracting.
# Best left at the bottom of the README instead.
#   html_logo = 'assets/hfpt-logo-lrg.png'

# The name of an image file (within the static path) to use as favicon
# of the docs.  This file should be a Windows icon file (.ico) being
# 16x16 or 32x32 pixels large.
# html_favicon = None
# (lb): Set your project logo thusly:
#  html_favicon = 'assets/easy-as-pypi_logo.png'

# Add any paths that contain custom static files (such as style sheets)
# here, relative to this directory. They are copied after the builtin
# static files, so a file named "default.css" will overwrite the builtin
# "default.css".
# html_static_path = ['_static']
# (lb): include docs/_static/images/*.png,
#       if you added, say, a project logo.
#  html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page
# bottom, using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# (lb): These work with alabaster, but are ignored by sphinx_rtd_theme.
html_sidebars = {
    "**": [
        "about.html",
        "navigation.html",
        "relations.html",
        "searchbox.html",
        # (lb): To donate, or not to donate.
        "donate.html",
    ]
}

# Additional templates that should be rendered to pages, maps page names
# to template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer.
# Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer.
# Default is True.
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages
# will contain a <link> tag referring to it.  The value of this option
# must be the base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = project_htmlhelp_basename

# -- Options for LaTeX output ------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass
# [howto/manual]).
latex_documents = [
    (
        "index",
        "{}.tex".format(package_name),
        project_docinfo,
        project_orgn,
        "manual",
    ),
]

# The name of an image file (relative to this directory) to place at
# the top of the title page.
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings
# are parts, not chapters.
# latex_use_parts = False

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True


# -- Options for manual page output ------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        "index",
        package_name,
        project_docinfo,
        [project_orgn],
        1,
    ),
]

# If true, show URL addresses after external links.
# man_show_urls = False


# -- Options for Texinfo output ----------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        "index",
        package_name,
        project_docinfo,
        project_orgn,
        package_name,
        project_texinfo,
        "Miscellaneous",
    ),
]

# Documents to append as an appendix to all manuals.
# texinfo_appendices = []

# If false, no module index is generated.
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
# texinfo_no_detailmenu = False

# -- Custom options for easy-as-pypi and related projects --------------

# If `lintcheck` complains about your anchor links, add them below.
#
# - CXREF: Default is: linkcheck_anchors_ignore = ["^!"]
#     https://www.sphinx-doc.org/en/master/usage/configuration.html
# - CXREF: `lintcheck` source:
#     https://www.sphinx-doc.org/en/master/_modules/sphinx/builders/linkcheck.html
linkcheck_anchors_ignore = [
    # Default ignore entry is leading bang.
    "^!",
    # `linkcheck` complains about these perfectly-working anchor links.
    # - E.g.,
    #   `<https://easy_as_pypi.readthedocs.io/en/latest/contributing.html#get-started>`__
    "get-started",
]
# 2023-11-01: linkcheck now reports broken on local links, not sure why.
#   sphinx-build --version: 6.2.1. See also:
#     ../.venv-easy-as-pypi/lib/python3.11/site-packages/sphinx/__init__.py
linkcheck_ignore = ["code-of-conduct.html"]
