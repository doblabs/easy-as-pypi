# vim:tw=0:ts=4:sw=4:et:norl
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/pydob/easy-as-pypi#ðŸ¥§
# License: MIT

# Copyright (c) Â© 2020-2023 Landon Bouma. All Rights Reserved.

[tool.poetry]
name = "easy-as-pypi"
version = "1.0.0"
description = "Bootstrapping your next Python CLI made easy as PyPI"

authors = ["Landon Bouma <pydob@tallybark.com>"]
maintainers = ["Tally Bark LLC <pydob@tallybark.com>"]

license = "MIT"
readme = "README.rst"

# Note that Poetry looks for packages under src/ by default, but
# we could specify it explicitly, e.g.,
#
#   packages = [{include = "the_package_name", from = "src"}]

homepage = "https://github.com/pydob/easy-as-pypi"
repository = "https://github.com/pydob/easy-as-pypi"
documentation = "https://easy-as-pypi.readthedocs.io/en/latest"

# REFER: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

# Keywords for PyPI to display, and to use for search results.
keywords = [
    "python",
    "boilerplate",
    "pyoilerplate",
    "scaffolding",
    "framework",
    "CLI",
    "TUI",
    "skeleton",
    "cookiecutter",
]

# ***

# The poetry build excludes __pycache__ folders and whatever is ignored
# by git (.gitignore), and it honors the 'include' and 'exclude' attrs.
#
#   https://python-poetry.org/docs/pyproject/#include-and-exclude
#
# E.g.,
#   include = [
#       { path = "tests", format = "sdist" },
#       { path = "for_wheel.txt", format = ["sdist", "wheel"] }
#   ]

include = [
    # Included by default:
    #  { path = "LICENSE", format = "sdist" },
    #  { path = "README.rst", format = "sdist" },
    #  { path = "pyproject.toml", format = "sdist" },
    { path = "*.rst", format = "sdist" },
    { path = "tests/", format = "sdist" },
    # Omitting: Makefile, dotfiles, docs/, etc.
]

# ***

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/doblabs/easy-as-pypi/issues"
"Documentation" = "https://easy-as-pypi.readthedocs.io/en/latest"
"Source Code" = "https://github.com/doblabs/easy-as-pypi"

# ***

# The default Poetry build-system is these two lines:
#   requires = ["poetry-core"]
#   build-backend = "poetry.core.masonry.api"
# But we use poetry-dynamic-versioning so we don't have to maintain
# the `version` variable atop this file.
[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

# ***

# YOU: Disable this if your project derived from easy-as-pypi
#      does not have a runnable script.
#      - Otherwise set this to the package entry point.
#
[tool.poetry.scripts]
    easy_as_pypi = "easy_as_pypi:cli"

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# - In the old days of setuptools and wheel, one could use setuptools_scm
#   to have the build automatically detect the version from your VCS.
#   - Here's the Poetry equivalent, as a plugin.
#     https://github.com/mtkennerly/poetry-dynamic-versioning
#     https://pypi.org/project/poetry-dynamic-versioning
[tool.poetry-dynamic-versioning]
enable = false
# vcs = "git"
# style = "semver"

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# pytest options
# ==============
#
# - pytest settings can be set in any of these files:
#
#     pytest.ini / pyproject.toml / tox.ini / setup.cfg
#
#   though it's recommended to avoid the latter.
#
# - Ref:
#
#     https://docs.pytest.org/en/stable/customize.html#setup-cfg
#
# - Hint:
#
#  --strict-markers   markers not registered in the `markers` section
#                     of the configuration file raise errors.
#
#  --tb=style         traceback print mode (auto/long/short/line/native/no).
#
#  -r chars           show extra test summary info as specified by chars:
#                     (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed,
#                     (p)assed, (P)assed with output, (a)ll except passed
#                     (p/P), or (A)ll.  (w)arnings are enabled by default
#                     (see --disable-warnings),  'N' can be used to reset
#                     the list. (default: 'fE').
#
[tool.pytest.ini_options]
addopts = "--tb=short --strict-markers -ra"

# ***

# coverage options
# ================

# CXREF: https://coverage.readthedocs.io/en/latest/config.html

# Note that if .coveragerc exists, these settings are ignored.

[tool.coverage.report]

# Use 'precision' to adjust the HTML coverage value, e.g.,
#   precision = 3
# might show
#   94.737%
# Whereas (the default)
#   precision = 0
# would instead show
#   95%
precision = 0

# The 'exclude_lines' option might be useful if want to exclude
# the main entry point, which might not be easily testable.
#
# - E.g., if the main __init__.py contains the lines:
#
#       if __name__ == '__main__':
#           main()  # <-- This line is missed
#
#   You could exclude the block using the config:
#
#       exclude_lines = [ "if __name__ == .__main__.:", ]
#
# - For the easy-as-pypi reference project, we don't currently
#   test the Click group command:
#
#       @click.group()
#       def cli():
#           pass  # <-- This line is missed
#
#   Which we could skip (not count as missed) using the config:
#
#       exclude_lines = [ "def cli\\(\\):", ]
#
#   but really we should add coverage (because I don't think
#   it's that difficult, but at least missing it has provided
#   a good example of how 'exclude_lines' values are regex).

[tool.coverage.run]

# Tabulate branch coverage, too.
branch = true

# Specifying 'source' is unnecessary, e.g.,
#   source = [ "src/", "tests/", ]
# is the same as either:
#   coverage run -m pytest tests/
#   # Or:
#   coverage run -m pytest tests/ src/
# However if you wanted to omit tests/ coverage, you could do this:
#   source = [ "src/", ]

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# black options
# =============
#
# CXREF:
#   https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file

[tool.black]

# black recommends 88 llen.
# CXREF: https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length
# USYNC: (max) line length shared among: black, flake8, isort, and doc8.
line-length = 88

# Default: Sussed from pyproject.toml
#  target-version = ['py37']

# Default: Only .py or .pyi files:
#  include = '\.pyi?$'

# 'extend-exclude' excludes files or directories in addition to the defaults
#
#  extend-exclude = '''
#  # A regex preceded with ^/ will apply only to files and directories
#  # in the root of the project.
#  (
#    ^/foo.py    # exclude a file named foo.py in the root of the project
#    | .*_pb2.py  # exclude autogenerated Protocol Buffer files anywhere in the project
#  )
#  '''

# ***

# flake8 options
# ==============
#
# CXREF: https://flake8.pycqa.org/en/latest/user/options.html
#
# - Flake8 itself does not support pyproject.toml (still uses ./.flake8)
#   but some plugins do.
#
#   - TRACK/2023-05-18: *pyproject.toml (PEP 518) support*
#       https://github.com/PyCQA/flake8/issues/234
#
# - The top 2 results to 'flake8 pyproject.toml':
#     https://github.com/john-hen/Flake8-pyproject
#     https://gitlab.com/durko/flake8-pyprojecttoml
#
#   I tried the first one, and it works.

# CXREF: https://github.com/DmytroLitvinov/awesome-flake8-extensions

[tool.flake8]

# Add a space after the path to make the output path easier to double-click-copy.
# - CXREF: See comments in Makefile:
#   - The `make lint` task expects this format so it
#     can prepare a Vim Quickfix file.
format = "%(path)s %(row)d:%(col)d: %(code)s %(text)s"

# So that the user can call `flake8`, maintain an exclude list. (Another way
# to lint is via `make lint` or `tox -e flake8`, which call flake8 on exact
# paths, e.g., `flake8 setup.py source/ tests/`. Here we achieve same effect
# but by doing the opposite, being exclusive rather than inclusive.)
# - Tl;dr This allows user to run simply `flake8`.
# - Use 'extend_exclude' vs. 'exclude' so we don't override --exclude from
#   command line.
extend_exclude = [
    # The build directory, if not ignored, has 50 or so lintable files.
    "build/",
    # Docs' conf.py is modified Sphinx boilerplate. That does not lint.
    "docs/conf.py",
    "docs/_themes/sphinx_rtd_theme/",
    # Not ignoring .tox adds tens of Ks files.
    ".tox/",
    # These directories don't contain any lintable files for flake8 to
    # find, but ignore them anyway to save whatever time globbing takes.
    "dist/",
    ".git/",
    "htmlcov/",
    ".pytest_cache/",
    "__pycache__",
    ".venv*/",
]

# USYNC: (max) line length shared among: black, flake8, isort, and doc8.
max_line_length = 88

# See list of error codes (we can list here to ignore):
#
#   https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
#
# - Project-agnostic, universal behavior (that supports and enforces this
#   and similar projects' style guides, i.e., this developer's preferences):
#
#   - âœ“ W391: blank line at end of file
#
#       - (lb): Personal preference. So that, e.g., Vim's <C-End> is predictable
#               and goes to first column of an empty last line, rather than to
#               some unknown last column of a nonempty last line.
#
#   - âœ“ W503: line break before binary operator
#
#       - (lb): I'm with Knuth, for readability, because columns align.
#
#               Prefer this:
#
#                   if (some_thing
#                       and another
#                       and another_thing):
#
#               over this:
#
#                   if (some_thing and
#                       another and
#                       another_thing):
#
# - Project- and dependency-specific, less common options:
#
#   - âœ— W605 invalid escape sequence:
#
#       - Specific to some Click library usage.
#         - (lb): Was warned on regex, e.g., '\d{2}' was flagged.
#         - (lb): Was warned on escape in Click help string, e.g., 'blah \# blah'.
#
#   - âœ— E711 comparison to None should be 'if cond is None:'
#
#       - Specific to SQLAlchemy library.
#         - (lb): SQLAlchemy filter function honors `== None`, not `is None`, e.g.,
#                   query = query.filter(AlchemyFact.activity == None)
#
extend_ignore = [
    # blank line at end of file
    "W391",
    # line break before binary operator
    "W503",

    # *** For black.

    # whitespace before â€˜,â€™, â€˜;â€™, or â€˜:â€™
    "E203",

    # line too long (82 > 79 characters)
    #  "E501",

    # Line too long
    # https://github.com/PyCQA/flake8-bugbear#opinionated-warnings
    #  "B950".
]

# ***

# isort options
# =============

# CXREF: https://pycqa.github.io/isort/docs/configuration/options.html

[tool.isort]

# USYNC: (max) line length shared among: black, flake8, isort, and doc8.
line_length = 88

# multi_line_output: 3 - Vertical Hanging Indent.
multi_line_output = 3

known_third_party = [
    # USYNC: Keep synced with [tool.poetry(.*)?.dependencies], below.
    #
    # *** External packages
    #
    # YOU: List symbol names of packages included in setup.py here.
    #
    # *** Testing packages
    "factory",
    "faker",
    "fauxfactory",
    "freezegun",
    "pytest",
    "pytest_factoryboy",
]

# ***

# doc8 options
# ============

[tool.doc8]

ignore-path = [
    ".tox/",
    # From `sphinx-apidoc` called by `make docs` from Makefile.
    "docs/_build/",
    # For `lint` GitHub Actions job run by .github/workflows/checks.yaml
    "poetry-shell-lint/.venv/",
    # For Makefile targets that create virtualenvs, e.g.,
    # `make develop`, `make doc8`, `make docs`, etc.
    ".venv*/",
]

# USYNC: (max) line length shared among: black, flake8, isort, and doc8.
max-line-length = 88

# Here's an old note: "Specify encoding lest doc8 think it's 'Windows-1254'
#                      and raise UnicodeDecodeError."
file-encoding = "utf-8"

# If you need to ignore specific errors in a specific file:
#  ignore-path-errors=/tmp/other_thing.rst;D001;D002
# DEVs: Uncomment verbose for TMI.
#  verbose = 1

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# Not using the special `dev` group:
#
#   [tool.poetry.group.dev.dependencies]
#
# but instead use multiple custom groups
# to serve essentially the same purpose,
# e.g., a developer might run:
#
#   poetry install --with dist,lint,test,docstyle,docs,extras

# ***

# **** Packages for preparing builds and releases.

[tool.poetry.group.dist]
optional = true

[tool.poetry.group.dist.dependencies]

# - "... enable dynamic versioning based on tags in your version control
#    system, powered by Dunamai"
#
#   https://pypi.org/project/poetry-dynamic-versioning
#   https://github.com/mtkennerly/poetry-dynamic-versioning
#   https://github.com/mtkennerly/dunamai
poetry-dynamic-versioning = ">=0.21.5"

# - "Collection of utilities for publishing packages on PyPI"
#
#   https://pypi.org/project/twine
#   https://twine.readthedocs.io/en/latest/
#
# - We use Poetry to publish to PyPI, but we also run `twine check`
#   to validate the sdist and bdist (especially useful is verifying
#   that your README.(md|rst) is valid for PyPI).
# - TRACK/2023-05-18: Perhaps Poetry will bake this someday:
#   - *check dist like twine check*
#       https://github.com/python-poetry/poetry/issues/2517
#   - Suggests exactly what our Makefile and tox.ini does:
#       poetry build && twine check dist/*
twine = ">=4.0.2"

# ***

# **** Packages for i18n.

# This group is build-related, so could be a part of 'group.dist',
# but keeping separate so `tox -e twine_check` excludes it.

[tool.poetry.group.i18n]
optional = true

[tool.poetry.group.i18n.dependencies]

# - "A collection of tools for internationalizing Python applications."
#
#   https://babel.pocoo.org/en/latest/
#   https://pypi.org/project/babel
babel = "^2.12.1"

# ***

# **** Packages for linting.

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]

# - "The Uncompromising Code Formatter"
#
#   https://pypi.org/project/black
#   https://github.com/psf/black
black = ">=23.3.0"

# - "the modular source code checker: pep8, pyflakes and co"
#
#   https://pypi.org/project/flake8
#   https://gitlab.com/pycqa/flake8
flake8 = ">=6.0.0"

# - "Flake8 plug-in loading the configuration from pyproject.toml"
#
#   https://pypi.org/project/Flake8-pyproject/
#   https://github.com/john-hen/Flake8-pyproject
Flake8-pyproject = ">=1.2.3"

# - "utility / library to sort Python imports"
#
#   https://pypi.org/project/isort
#   https://github.com/timothycrosley/isort
isort = ">=5.12.0"

# ***

# **** Packages for testing, either locally or via CI.

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]

# ***** pytest Framework & Related

# - "pytest: simple powerful testing with Python"
#
#   https://pypi.org/project/pytest
#   https://docs.pytest.org/en/latest/
pytest = ">=7.3.1"

# - "Thin-wrapper around the mock package for easier use with pytest"
#
#   https://pypi.org/project/pytest-mock
#   https://github.com/pytest-dev/pytest-mock/
pytest-mock = ">=3.10.0"

# - "generic virtualenv management and test command line tool"
#
#   https://pypi.org/project/tox
#   https://tox.readthedocs.io/en/latest/
tox = ">=4.5.1"

# DUNNO/2022-09-30: I thought we might need a pyenv plugin (tox-pyenv)
# but `tox` is working great. Perhaps because I ran `pyenv install`
# on all the Python versions previously (separate from this project
# setup).
# - SAVVY: If tox fails on you, perhaps ensure pyenv versions installed.

# ***** Coverage

# - "Code coverage measurement for Python"
#
#   https://pypi.org/project/coverage
#   https://coverage.readthedocs.io/en/latest/
coverage = ">=7.2.5"

# - "Pytest plugin for measuring coverage"
#
#   https://pypi.org/project/pytest-cov
#   https://github.com/pytest-dev/pytest-cov
pytest-cov = ">=4.0.0"

# - Upload to codecov.io.
#
#   https://pypi.org/project/codecov
#   https://github.com/codecov/codecov-python
codecov = ">=2.1.13"

# *** Datetime testing.

# - "travel through time by mocking the datetime module"
#
#   https://github.com/spulec/freezegun
#  freezegun = ">=0.3.14"

# ***** Fakers and Factories.

# - "package that generates fake data for you"
#
#   https://pypi.org/project/Faker
#   https://github.com/joke2k/faker
#  Faker = ">=18.7.0"

# - "Generates random data for your tests"
#
#   https://pypi.org/project/fauxfactory
#   https://github.com/omaciel/fauxfactory
#  fauxfactory = ">=3.1.0"

# - ORM record generator / "test fixtures replacement for Python".
#
#   https://pypi.org/project/factory-boy
#   https://github.com/FactoryBoy/factory_boy
#  factory-boy = ">=3.2.1"
#
# - "Factory Boy support for pytest"
#
#   https://pypi.org/project/pytest-factoryboy
#   https://github.com/pytest-dev/pytest-factoryboy
#  pytest-factoryboy = ">=2.5.1"

# ***

# **** Packages for linting the documentation.

[tool.poetry.group.docstyle]
optional = true

[tool.poetry.group.docstyle.dependencies]

# - "Style checker for Sphinx (or other) RST documentation"
#
#   https://pypi.org/project/doc8
#   https://launchpad.net/doc8
#
# ISOFF/2023-05-18: Latest sphinx-rtd-theme (1.2.0) and doc8 (1.1.1)
# cannot coexist â€” theme wants old docutils (<0.19), and doc8 wants
# more recent docutils (>=0.19,<0.21).
# - So this will not work, regardless of if you install --with docstyle,
#   because Poetry always checks dependencies *across groups*.
#
#    doc8 = ">=1.1.1"
#
# - Instead, we'll leave `doc8` uninstalled via Poetry, and we'll manage
#   `doc8` independently using pip-install in its own virtualenv.
#
#   - CXREF: See `make doc8`.

# ***

# - Python docstring checker.
#
#   https://pypi.org/project/pydocstyle
#   https://github.com/PyCQA/pydocstyle/
pydocstyle = ">=6.3.0"

# - "Python lib for TOML."
#
#   https://pypi.org/project/toml
#   https://github.com/uiri/toml
#
# - We include `toml` so `pydocstyle` can validate `pyproject.toml` (this file).
#   - And avoids warning on `pydocstyle`:
#       WARNING: The /path/to/package/pyproject.toml configuration file was
#                ignored, because the `toml` package is not installed.
toml = ">=0.10.2"

# ***

# **** Packages for building the documentation.

[tool.poetry.group.docs]
optional = true

# Specify packages required to build the documentation.
[tool.poetry.group.docs.dependencies]
# - "Python documentation generator"
#
#   https://pypi.org/project/Sphinx
#   https://www.sphinx-doc.org/en/master/
sphinx = "^6.2.1"
# LATER/2023-05-14: Update to v7 once sphinx_rtd_theme supports
#  Sphinx = ">=7.0.1"
#
# REFER/2023-05-14: How you could specify different
# dependency versions based on the Python target:
#
# sphinx = [
#     {version = "4.3.1", python = "~3.7.0"},
#     {version = "^4.5.0", python = "^3.8"},
# ]

# - "Read the Docs theme for Sphinx"
#
#   https://pypi.org/project/sphinx-rtd-theme
#   https://github.com/readthedocs/sphinx_rtd_theme
#
# ALERT/2023-05-18: See comments above: This package requires older
# docutils than doc8 v1, so never the two shall coexist.
sphinx-rtd-theme = ">=1.2.0"

# - "Python API and shell utilities to monitor file system events."
#
#   https://pypi.org/project/watchdog
#   https://github.com/gorakhargosh/watchdog
watchdog = ">=3.0.0"

# ***

# **** Additional packages, such as those developer may want to run from CLI.

[tool.poetry.group.extras]
optional = true

[tool.poetry.group.extras.dependencies]
# - "Render local readme files before sending off to GitHub"
#   - For previewing docs/history-ci.md.
#
#   https://pypi.org/project/grip
#   https://github.com/joeyespo/grip
grip = ">=4.6.1"

# - "pdbr is intended to make the PDB results more colorful.
#    it uses Rich library to carry out that."
#   Aka: *Colorful PDB experience using Rich*.
#
#   https://pypi.org/project/pdbr
pdbr = ">=0.8.5"

# - "A viewer for ReStructuredText documents that renders them on the fly."
#   - For previewing README.rst.
#
#   https://pypi.org/project/restview
#   https://mg.pov.lt/restview/
restview = ">=3.0.1"

# ================================================================= #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# ================================================================= #

# **** Finally, the app dependencies.

[tool.poetry.dependencies]

# Python versions supported (required).
# Because flake8, start at 3.8.1.
python = "^3.8.1"

click = "^8.0.0"

# ****

# KLUGE/2023-05-19: Use urllib3 v1 to avoid upstream pkg regression, e.g.,
#
#   (.venv-easy-as-pypi) $ poetry install --with test
#   Updating dependencies
#   Resolving dependencies... (0.1s)
#
#   HTTPResponse.__init__() got an unexpected keyword argument 'strict'
#
# - Oddly, this doesn't happen on `make develop`, but afterwards.
#
# - If you `poetry install -vvv --with test`, you'll see the error
#   emits from `cachecontrol`, which was called by `requests, which
#   was called by Poetry. So perhaps it makes sense this didn't
#   fail on `make develop`, if setting up a new virtualenv doesn't
#   invoke whatever cache mechanism this is.
#
# - Here's the specific error (TypeError):
#
#   HTTPResponse.__init__() got an unexpected keyword argument 'strict'
#
#   at .venv-easy-as-pypi/lib/python3.11/site-packages/cachecontrol/serialize.py:141 in prepare_response
#       139â”‚             body = io.BytesIO(body_raw.encode("utf8"))
#       140â”‚
#     â†’ 141â”‚         return HTTPResponse(body=body, preload_content=False, **cached["response"])
#       142â”‚
#       143â”‚     def _loads_v0(self, request, data, body_file=None):
#
# - FWIW, I've since the same issue with Pandas is a derived project:
#
#   - KLUGE/2023-05-07: Pandas relies on cachecontrol which
#     works with urllib3 v1, but not recently released v2:
#
#       $ poetry add pandas
#
#       HTTPResponse.__init__() got an unexpected keyword argument 'strict'
#
#     Because:
#
#       venv/lib/python3.10/site-packages/cachecontrol/serialize.py:54
#          â†’  54â”‚                 u"strict": response.strict,
#
#   - So avoiding v2 until this is fixed.
#
# - Interestingly, error in same package and same file, but different line
#   (though also 12 days between installs).
#
# TRACK/2023-05-07: Keep tabs on cachecontrol; remove this kludge eventually.
urllib3 = "<2"

