# vim:tw=0:ts=4:sw=4:et:norl:ft=config
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/pydob/ <varies>
# Pattern: https://github.com/pydob/easy-as-pypi#ðŸ¥§
# License: MIT

# CXREF: tox configuration guide:
#   https://tox.wiki/en/latest/config.html#conf-core

# USYNC: Keep Python versions updated:
#   https://devguide.python.org/versions/

[tox]

requires =
    tox>=4

# Omit tasks:
#   codecov     -- for CI coverage upload
#   isort       -- unrelated issues and will always fail.
envlist = py{38,39,310,311}, dist_check, docs, flake8, pydocstyle

# Defer install to Poetry.
isolated_build = true

[testenv]
description = run unit tests

# The [testenv] section provides defaults to the other [testenv:TEST] sections.

# Below, we'll set basepython for each of the make-test tasks. Here, we
# specify the latest Python as the default for other tasks (flake8, etc.).
# - USYNC: Keep current with Makefile's `VENV_PYVER`.
basepython = python3.11

# Defer install to Poetry.
skip_install = true

allowlist_externals = make, poetry, rm

# Run tests by default. The [testenv:py*] tasks will default to these commands.
# Other tasks (flake8, etc.) will override these values with their own commands.
commands_pre =
    poetry install --with test

# USAGE: {posargs} is what user might enter after CLI double-dash, e.g.,
#   tox run -e py310 -- -v
#   tox run -- -k <someFunctionOrClass>
commands =
    poetry run pytest tests/ --import-mode importlib {posargs}

# ***

# Tox will deduce the version if not specified, but we use
# a 'basepython' in base [testenv], so these are necessary.

[testenv:py38]
basepython = python3.8

[testenv:py39]
basepython = python3.9

[testenv:py310]
basepython = python3.10

[testenv:py311]
basepython = python3.11

# ***

[testenv:flake8]
description = run linter: flake8
# Skip poetry-install.
commands_pre =
deps = flake8
commands = flake8 src/ tests/

[testenv:isort]
description = run linter: isort
# Skip poetry-install.
commands_pre =
deps = isort
commands = isort --check-only --recursive --verbose src/ tests/

# PEP 257 -- Docstring Conventions
#   https://www.python.org/dev/peps/pep-0257/
[testenv:pydocstyle]
description = run linter: pydocstyle
# Skip poetry-install.
commands_pre =
deps = pydocstyle
commands = pydocstyle src/ tests/

[testenv:docs]
description = run linter: docc
commands_pre =
    poetry install --with docs
deps =
    doc8
    # Avoid doc8 error: `D000 Cannot analyze code. Pygments package not found.`
    pygments
commands =
    # Build to a temporary directory, e.g., instead of calling simply
    #     make docs
    # make it unnecessarily more complex,
    # (lb) because I saw this code in another project and thought it looked cool.
    # The make-docs here is called as, e.g.,
    #     make docs \
    #       BUILDDIR=/path/to/project/.tox/docs/tmp \
    #       SPHINXOPTS=
    make docs \
        BUILDDIR={envtmpdir} \
        SPHINXOPTS={env:SPHINXOPTS_BUILD:''}
    # The make-linkcheck is called as, e.g.,
    #     make --directory=docs linkcheck \
    #       BUILDDIR=/path/to/project/.tox/docs/tmp \
    #       SPHINXOPTS=
    make --directory=docs linkcheck \
        BUILDDIR={envtmpdir} \
        SPHINXOPTS={env:SPHINXOPTS_LINKCHECK:}
    # "Doc8 is an opinionated style checker for rst...."
    doc8

[testenv:dist_check]
description = run linter: dist_check
commands_pre =
    poetry install --with dist
commands =
    poetry build
    # Check distribution package (e.g., verify README will render in PyPI)
    # [Ã  la deprecated readme_renderer and `python setup.py check -m -r -s`].
    twine check dist/*

[testenv:codecov]
description = run coverage
# Same as default 'commands_pre' (above) but being explicit
# that we want the same (because default commands_pre intended
# for [testenv:py*] tasks).
commands_pre =
    poetry install --with test
# Use passenv, lest:
#   Error: Missing repository upload token
passenv = CODECOV_*
commands =
    # Remove XML so codecov regenerates it.
    /bin/rm -f coverage.xml
    # Run tests and generate coverage.
    pytest --cov=./src tests/
    # Upload coverage results to codecov.io.
    codecov

